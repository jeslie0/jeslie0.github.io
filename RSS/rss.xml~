<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[James Leslie's Blog]]></title>
<description><![CDATA[James Leslie's Blog]]></description>
<link>https://jeslie0.github.io</link>
<lastBuildDate>Fri, 18 Feb 2022 19:49:27 +0000</lastBuildDate>
<item>
  <title><![CDATA[Blog Posts]]></title>
  <description><![CDATA[
<ul class="org-ul">
<li><span class="timestamp">[2021-06-08]</span> <a href="2021-06-08-Stoicism-and-raising-a-puppy.html">Stoicism and raising a puppy</a></li>
<li><span class="timestamp">[2021-03-06]</span> <a href="2021-03-06-Canonical-Model-Structure-on-Cat.html">The Canonical Model Structure on Cat/Gpd</a></li>
<li><span class="timestamp">[2021-03-05]</span> <a href="2021-03-05-Zoom-screen-sharing.html">iPad Screen Sharing to Zoom on a University Network</a></li>
<li><span class="timestamp">[2019-04-15]</span> <a href="2019-04-15-is-zero-a-natural-number.html">Is zero a natural number?</a></li>
<li><span class="timestamp">[2019-01-12]</span> <a href="2019-1-12-A-group-object-in-the-category-of-groups.html">A group object in the category of groups</a></li>
<li><span class="timestamp">[2018-07-07]</span> <a href="2018-7-7-Why-isn't-every-category-isomorphic-to-its-opposite.html">Why isn't every category isomorphic to its opposite?</a></li>
<li><span class="timestamp">[2018-06-30]</span> <a href="2018-6-30-Categories-of-elements.html">Categories of elements</a></li>
<li><span class="timestamp">[2018-04-23]</span> <a href="2018-4-23-Yoneda-Yoneda-Yoneda.html">Yoneda, Yoneda, Yoneda</a></li>
<li><span class="timestamp">[2018-04-15]</span> <a href="2018-04-15-Monoidal-Categories.html">Monoidal Categories</a></li>
</ul>
<div class="taglist"></div>
<div class="post-date">08 Jun 2021</div><h1 class="post-title"><a href="https://jeslie0.github.io/2021-06-08-Stoicism-and-raising-a-puppy.html">Stoicism and raising a puppy</a></h1>
<p>
A month or two ago, my girlfriend, her brother and I went for a drive and came back with a puppy. My girlfriend had been wanting a puppy for many years; now that the day had come where she would get to take one home, she was beaming more than ever. When I lived in Scotland, my family raised and loved a yellow labrador (named Bobby), so I knew what to expect from the coming months. Or so I thought. Bobby came into my life when I was a mere 10 years old, so most of my memories of him are from the later stages in his life. My parents' memories of this time will probably be better than mine. I have the occasional memory of Bobby chewing on the skirting boards and urinating behind the sofa, but apart from that, he is a dream dog in my mind.
</p>

<p>
The new puppy (Woody) makes me doubt the integrity of my previous memories. Woody is a chocolate labrador, with an apt name. Anything in our vicinity made of wood will end up suffering the misfortune of being chewed on. The list of casualties includes chairs, desks, tables, skirting boards, book shelves, notebooks and, of course, twigs and branches. This is only the list of his wooden feasts. Woody also has a real taste for plastic and metal, which unfortunately we found out when he chewed his way through my girlfriend's bike's chain guard.
</p>

<p>
This brings me to my first reflection on Stoicism. Keeping a puppy that tries to destroy everything in reach reminded me of the temporary nature of belongings. It is far too easy to forget that even though we purchase items, they don't last forever. Even if they do out last us, we don't take them with us. We should appreciate what we have while we have it.
</p>

<p>
My second reflection is about anger. Before Woody came into my life, I thought that I was very hard to anger: I can't remember a recent time that felt really angry. Now though, it seems like every day my anger rises to the surface. This usually happens when Woody thinks it's a good idea to go around trying to eat everything in the house, including computer cables. When this happens, I have a real desire to punish Woody, but really this is only anger trying to take control. Punishment in the form of yelling or hitting serves no good, even in trying to get Woody's behaviour to change. Some say that it can even reinforce the behaviour. The only reason I have a desire to punish him is because of the anger that bubbles up. The only purpose it serves is as a release for me. I need to accept that chewing is a part of his nature, especially now that he is teething. The best thing to do is to try and redirect his attention to one of his many toys, designed for withstanding his mighty chomp. When he can't be redirected, it's time for him to sleep.
</p>

<p>
When my girlfriend and I were planning living with a new dog, I didn't think that Stoic values would be an important factor in raising it. I am glad that I was wrong.
</p>

<p>
Attached is a picture of the (not so little) Woody. Today, he has been a real star of a puppy and as I type this, he is fast asleep in his bed.
</p>

<figure id="org4bfec14">
<img src="../images/blog/woody.jpeg" alt="woody.jpeg" width="300" class="rounded corners">

</figure>
<div class="taglist"></div>
<div class="post-date">06 Mar 2021</div><h1 class="post-title"><a href="https://jeslie0.github.io/2021-03-06-Canonical-Model-Structure-on-Cat.html">The Canonical Model Structure on Cat/Gpd</a></h1>
<p>
When one first starts studying category theory, they learn that the correct notion of "the same" for categories is that of equivalence, rather than the stronger notion isomorphism. For those that have studied some algebraic topology, the situation is very similar to identifying spaces if they are homotopic, rather than homeomorphic. This is often given as an analogy, but the two notions can be reconciled by giving model structures where the weaker form of identification forms the subcategory of weak equivalences. Here, we define and present the so called canonical model structure on the category of categories. The proof of each step given can also be applied to the category of groupoids. 
</p>

<p>
We denote the category of (small) categories by \(\mathbf{Cat}\) and the category of (small) groupoids \(\mathbf{Gpd}\).
</p>

<p>
This proof can be found on the nLab's "<a href="https://ncatlab.org/nlab/show/canonical+model+structure+on+Cat">canonical model structure on Cat</a>" page, but here we go into a lot more detail of the constructions.
</p>
<div id="outline-container-org2843360" class="outline-2">
<h2 id="org2843360">The model structure</h2>
<div class="outline-text-2" id="text-org2843360">
<div class="definition" id="orgadd9aa9">
<p>
Let \(C\) be a category and \((A, B)\) a pair of subcategories. The pair \((A, B)\) is a <i>weak factorisation system</i> if:
</p>
<ol class="org-ol">
<li>Both \(A\) and \(B\) are stable under retracts;</li>
<li>\(A\) is in the left lifting class of \(B\) (\(A \subset LB\));</li>
<li>Every morphism \(f : X \to Y\) in \(C\) factors as \(f = pi\) with \(i \in A\) and \(p \in B\).</li>
</ol>

</div>

<div class="definition" id="org95c657a">
<p>
A <i>model structure</i> on a category \(\mathcal{C}\) consists of a triple of wide subcategories \(W, F, C \) whose morphisms are called <i>weak equivalences</i> (anotated with a \(\sim\)), <i>fibrations</i> (annotated with a double head \(\twoheadrightarrow\)) and <i>cofibrations</i> (annotated with a tail \(\rightarrowtail\)), respectively. This triple must satisfy the following three axioms:
</p>
<ol class="org-ol">
<li>\(W\) satisfies 2-out-of-3;</li>
<li>\((F, W \cap C)\) is a weak factorisation system;</li>
<li>\((F \cap W, C)\) is a weak factorisation system.</li>
</ol>

</div>

<div class="definition" id="orgcdc51c8">
<p>
A <i>model category</i> is a finitely bicomplete category, along with a model structure on it.
</p>

</div>

<p>
Before giving the main result, we need one more definition.
</p>

<div class="definition" id="org8b48181">
<p>
Let \(F: \mathcal{A} \to \mathcal{B}\) be a functor. We say \(F\) is an <i>isofibration</i> if for every \(a \in \mathcal{A}\) and isomorphism \(f : Fa \to b \in \mathcal{B}\), there is an isomorphism \(g: a \to a' \in \mathcal{A}\) such that \(Ff = g\).
</p>

</div>

<p>
Our main result is the following:
</p>
<div class="theorem" id="orgeb95f40">
<p>
The category \(\mathbf{Cat}\) has a model structure on it with:
</p>
<ol class="org-ol">
<li>\(W\) being the class of categorical equivalences;</li>
<li>\(F\) being the class of isofibrations;</li>
<li>\(C\) being the class of functors injective on objects.</li>
</ol>

</div>

<p>
The rest of this section will be proving the above theorem. That \(\mathbf{Cat}\) and \(\mathbf{Gpd}\) has all finite limits follows from it having a terminal object, binary products and equalisers. The theory of categories and groupoids are generalised algebraic theories, so the category of models (\(\mathbf{Cat}\) and \(\mathbf{Gpd}\), respectively) has all (finite) colimits.
</p>

<p>
We now break down each of the defining features of a model structure and show that they hold here.
</p>
</div>

<div id="outline-container-orga099778" class="outline-3">
<h3 id="orga099778">2-out-of-3</h3>
<div class="outline-text-3" id="text-orga099778">
<div class="lemma" id="orga224df2">
<p>
Categorical equivalences are closed under 2-out-of-3.
</p>

</div>

<div class="proof" id="orgb972bc0">
<p>
This follows by basic diagram chasing. If we have the following commuting triangle, with any two maps being equivalences, we can take pseudo-inverses to construct a pseudo-inverse to the third map.
</p>
\begin{center}
  \begin{tikzcd}
    X \ar[rr, "f"] \ar[rd, "g"'] & & Y \\
    & Z \ar[ru, "h"'] &
  \end{tikzcd}
\end{center}

</div>
</div>
</div>

<div id="outline-container-org29bbb0f" class="outline-3">
<h3 id="org29bbb0f">Retracts</h3>
<div class="outline-text-3" id="text-org29bbb0f">
<div class="lemma" id="org5bed558">
<p>
The class of categorical equivalences is stable under retracts.
</p>

</div>

<div class="proof" id="org0affbd8">
<p>
Suppose we have the following commuting diagram where \(g\) is an equivalence. We show \(f\) is also an equivalence:
</p>
\begin{center}
  \begin{tikzcd}
    X \arrow[r, "i"] \arrow[d, "f"] \arrow[rr, "1_X", bend left] & U \arrow[r, "u"] \arrow[d, "\sim", "g"'] & X \arrow[d, "f"] \\
    Y \arrow[r, "j"] \arrow[rr, "1_Y", bend right]               & V \arrow[r, "v"]                   & Y               
  \end{tikzcd}
\end{center}

<p>
Since \(g\) is an equivalence, there exists a functor \(g'\) such that \(gg' \cong 1_V\) and \(g'g \cong 1_U\). The morphism \(pg'j\) is then easily seen to be a pseudo-inverse to \(f\), showing that it is also an equivalence.
</p>

</div>

<div class="lemma" id="org703ed12">
<p>
The class of isofibrations is stable under retracts.
</p>

</div>

<div class="proof" id="org2546d1e">
<p>
Suppose the following diagram commutes and \(g\) is an isofibration. We need to show that \(f\) is an isofibration also:
</p>
\begin{center}
  \begin{tikzcd}
    X \arrow[r, "i"] \arrow[d, "f"] \arrow[rr, "1_X", bend left] & U \arrow[r, "p"] \arrow[d, "g", two heads] & X \arrow[d, "f"] \\
    Y \arrow[r, "j"] \arrow[rr, "1_Y", bend right]               & V \arrow[r, "q"]                           & Y               
  \end{tikzcd}
\end{center}
<p>
Let \(x \in X\) and \(\alpha : fx \to y\) be an isomorphism in \(Y\). We apply \(j\) to get an isomorphism \(j\alpha : jfx=gix \to jy\). As \(g\) is an isofibration, there is an isomorphism \(\beta : ix \to u \in U\) such that \(g\beta = j\alpha\). Applying \(p\), we have an isomorphism \(p\beta : pix=x \to pu \in X\). If we apply \(f\) to this map, we have:
</p>
\begin{align*}
  fp\beta &= qg\beta && \text{right square}\\
          &= qj\alpha && \text{definition of }\beta\\
          &= \alpha.
\end{align*}
<p>
Hence, given an isomorphism \(\alpha\), there exists an isomorphism \(p\beta\) such that \(fp\beta = \alpha\), so \(f\) is also an isofibration.
</p>

</div>

<div class="lemma" id="org432c6e6">
<p>
The class of functors injective on objects is stable under retracts.
</p>

</div>

<div class="proof" id="orgb15a8d9">
<p>
Suppose we have the following diagram in \(\mathbf{Cat}\), where \(g\) is a functor injective on objects. We need to show that \(f\) is injective on objects also:
</p>
\begin{center}
  \begin{tikzcd}
    X \arrow[r, "i"] \arrow[d, "f"] \arrow[rr, "1_X", bend left] & U \arrow[r, "p"] \arrow[d, "g", tail] & X \arrow[d, "f"] \\
    Y \arrow[r, "j"] \arrow[rr, "1_Y", bend right]               & V \arrow[r, "q"]                      & Y               
  \end{tikzcd}
\end{center}

<p>
Suppose \(x\) and \(y\) are objects in \(X\) such that \(fx = fy\). We have the following chain of equalities:
</p>
\begin{align*}
  fx = fy &\implies jfx=jfy\\
          &\implies gix=giy && \text{(left square)}\\
          &\implies ix=iy && (g \in C)\\
          &\implies pix=piy\\
          &\implies x=y.
\end{align*}
<p>
Hence \(f\) is also injective on objects.
</p>

</div>
</div>
</div>

<div id="outline-container-orgca7c4d4" class="outline-3">
<h3 id="orgca7c4d4">Lifting properties</h3>
<div class="outline-text-3" id="text-orgca7c4d4">
<p>
We first give a lemma that will be useful in solving the lifting problems in this section.
</p>

<div class="lemma" id="orge8f9267">
<p>
Isofibrations that are equivalences are exactly the equivalences that are surjective on objects.
</p>

</div>

<div class="proof" id="orge2133c3">
<p>
Suppose that \(F: \mathcal{A} \to \mathcal{B}\) is an isofibration and an equivalence. To see that it is surjective on objects, let \(b \in B\). As \(F\) is an equivalence, it is fully faithful, so there is some \(a \in \mathcal{A}\) and isomorphism \(\beta : Fa \to b \in \mathcal{B}\). As \(F\) is an isofibration, there is an isomorphism \(\alpha : a \to a' \in \mathcal{A}\) such that \(F\alpha = \beta\). Then, we must have that \(Fa' = b\), so \(F\) is surjective on objects.
</p>

<p>
If \(F\) is an equivalence that is surjective on objects, it is also an isofibration. Let \(a \in \mathcal{A}\) and \(\beta : Fa \to b\) be an isomorphism in \(\mathcal{B}\). As \(F\) is surjective on objects, \(b = Fa'\) for some \(a' \in \mathcal{A}\), so \(\beta\) is a map \(Fa \to Fa'\). By \(F\) being full, there is a morphism \(\alpha : a \to a'\) such that \(F\alpha = \beta\). By \(F\) being faithful, this \(\alpha\) must be an isomorphism, so \(F\) is an isofibration.
</p>

</div>

<div class="lemma" id="orgdccfe53">
<p>
The class of functors injective on objects has the left lifting property with respect to functors that are isofibrations and equivalences.
</p>

</div>

<div class="proof" id="orga6faccc">
<p>
Suppose we have the following commuting diagram, where \(f\) is injective on objects and \(g\) is an equivalence and isofibration:
</p>
\begin{center}
  \begin{tikzcd}
    X \arrow[r, "i"] \arrow[d, "f"', tail] & U \arrow[d, "g"', "\sim", two heads] \\
    Y \arrow[r, "j"']                      & V                             
  \end{tikzcd}
\end{center}

<p>
As this commutes, we have the following ``object square'' commuting in \(\mathbf{Set}\):
</p>
\begin{center}
  \begin{tikzcd}
    X_0 \arrow[r, "i_0"] \arrow[d, "f_0"', tail] & U_0 \arrow[d, "g_0", two heads] \\
    Y_0 \arrow[r, "j_0"']                        & V_0                            
  \end{tikzcd}
\end{center}

<p>
In particular, \(f_0\) is injective and by Lemma 10, \(g_0\) is surjective. As \((\text{inj}, \text{surj})\) form a weak factorisation system on \(\mathbf{Set}\), there is a lift \(h_0\). We now aim to turn \(h_0\) into a functor. Let \(\alpha: y \to y'\) be a morphism in \(Y\). We then have a morphism \(j\alpha : jy = gh_0y \to gh_0y'=jy' \in V_0\). As \(g\) is fully faithful, there is a unique morphism \(\beta : h_0 y \to h_0 y' \in U\) such that \(g\beta = j\alpha\). We define \(h\alpha := \beta\). As \(j\) is a functor, it must preserve identity morphisms and as \(g\) is fully faithful, the lift of an identity morphism from \(v\) to \(u\) must be the identity, so \(h\) preserves identity morphisms. Similarly, by functorality of \(j\) and fully faithfulness of \(g\), we have that composites are mapped to composites, so \(h\) is a functor and makes the bottom triangle commute:
</p>
\begin{center}
  \begin{tikzcd}
    X \arrow[r, "i"] \arrow[d, "f"', tail] & U \arrow[d, "g"', "\sim", two heads] \\
    Y \arrow[r, "j"']  \ar[ru, "h"]                    & V                             
  \end{tikzcd}
\end{center}

<p>
The top triangle commutes on objects, so we need to check it commutes on maps. Given \(\alpha : x \to x' \in X\),
</p>
\begin{align*}
  g i \alpha &= j f \alpha\\
             &= g h f \alpha
\end{align*}
<p>
So \(i \alpha = h f \alpha\) by fully faithfulness of \(g\), meaning that the top triangle commutes. This means that \(h\) is indeed a lift, which shows that functors injective on objects are in the left lifting class of fucntors that are equivalences and isofibrations.
</p>

</div>

<div class="lemma" id="org2a9302a">
<p>
The class of functors injective on objects which are also equivalences has the left lifting property with respect to functors that are isofibrations.
</p>

</div>

<div class="proof" id="orgb701f41">
<p>
Suppose we have the following diagram commuting, with \(f\) an equivalence that is injective on objects and \(g\) an isofibration:
</p>
\begin{center}
  \begin{tikzcd}
    X \arrow[r, "i"] \arrow[d, "f"', "\sim", tail] & U \arrow[d, "g", two heads] \\
    Y \arrow[r, "j"']                      & V                          
  \end{tikzcd}
\end{center}

<p>
To construct a functor \(h:Y \to U\), we use the axiom of choice to get some extra structure. As \(f\) is essentially surjective, for every object \(y \in Y\), we choose an isomorphism \(\alpha_y : fx_y \to y\), picking the identity morphism wherever possible, i.e \(\alpha_{fx} = 1_{fx}\) (we call the argument of \(f\) \(x_y\), which is well defined at \(f\) is injective on objects). As \(g\) is an isofibration, we choose for every \(y \in Y\) a morphism \(\beta_y : ix_y \to u_y \in U\) such that \(g\beta_y = j\alpha_y\), again, picking the identity morphism whenever possible, i.e \(\beta_{fx} = 1_{ix}\). On objects, we define \(h(y) = u_y\). For morphisms, the output is a little more complicated. Starting with a map \(\gamma : y \to y'\), we form the composite \(\alpha_{y'}^{-1} \gamma \alpha_y : fx_y \to fx_{y'}\). We let \(\overline{\alpha_{y'}^{-1} \gamma \alpha_y} : x_y \to x_{y'}\) be the unique map that \(f\) maps to \(\alpha_{y'}^{-1} \gamma \alpha_y\). Then, applying \(i\), we have a map \(i \overline{\alpha_{y'}^{-1} \gamma \alpha_y} : ix_y \to ix_{y'}\). We can then compose with maps \(\beta_y^{-1}\) and \(\beta_{y'}\) to get \(\beta_{y'} i \left(\overline{\alpha_{y'}^{-1} \gamma \alpha_y}\right) \beta_{y}^{-1} : u_y \to u_{y'}\). This is what we define \(h\gamma\) to be.
</p>

<p>
To see that \(h\) is a functor, we see that it sends the identity to the identity:
</p>
\begin{align*}
  \beta_{y} i \left(\overline{\alpha_{y}^{-1} 1_y \alpha_y}\right) \beta_{y}^{-1} &= \beta_y i\left( \overline{1_y}\right) \beta_y^{-1} \\
  &= \beta_y i(1_{x_y}) \beta_y^{-1}\\
  &=1_{u_y}.
\end{align*}
<p>
We also see that \(h\) preserves composites: let \(\gamma : y \to y'\) and \(\delta : y' \to y''\). Then:
</p>
\begin{align*}
  \beta_{y''} i \left(\overline{\alpha_{y''}^{-1} \delta \alpha_{y'}}\right) \beta_{y'}^{-1} \circ \beta_{y'} i \left(\overline{\alpha_{y'}^{-1}\gamma \alpha_y}\right) \beta_y^{-1} &=  \beta_{y''} i \left( \overline{\alpha_{y''}^{-1} \delta \alpha_{y'}}\right) i \left( \overline{\alpha_{y'}^{-1}\gamma \alpha_y}\right) \beta_y^{-1}\\
                                                                                                                                                                                     &= \beta_{y''}i \left( \overline{\alpha_{y''}^{-1} \delta \alpha_{y'}} \circ \overline{\alpha_{y'}^{-1} \gamma \alpha_y} \right) \beta_y^{-1}\\
  &= \beta_{y''} i \left( \alpha^{-1}_{y''} \delta \gamma \alpha_y \right) \beta_y^{-1}
\end{align*}

<p>
We now show that it makes both the triangles commute:
</p>
\begin{center}
  \begin{tikzcd}
    X \arrow[r, "i"] \arrow[d, "\sim", "f"', tail] & U \arrow[d, "g", two heads] \\
    Y \arrow[r, "j"'] \arrow[ru, "h"]      & V                          
  \end{tikzcd}
\end{center}

<p>
Given \(x \in X\), we need \(ix = u_{fx}\), however this follows from our choice of maps being the identity wherever possible, which means \(\beta_{fx} = 1_{ix}\). Likewise, for maps \(\gamma: x \to x'\), our chosen isomorphisms are the identity, giving \(hf\gamma = i\gamma\). Now, if \(y \in Y\), we see by definition that \(gu_y = jy\), so the bottom triangle commutes on objects. Given a map \(\gamma : y \to y' \in Y\), by the properties of \(\beta_y\) we have:
</p>
\begin{align*}
  g\left( \beta_{y'} i \left(\overline{\alpha_{y'}^{-1} \gamma \alpha_y}\right) \beta_{y}^{-1} \right) &= g(\beta_{y'}) gi \left(\overline{\alpha_{y'}^{-1} \gamma \alpha_y}\right) g(\beta_{y})^{-1}\\
                                                                                                         &= j(\alpha_{y'}) jf \left( \overline{\alpha_{y'}^{-1} \gamma \alpha_y} \right) j(\alpha_y)^{-1}\\
                                                                                                         &= j(\alpha_{y'}) j(\alpha_{y'})^{-1} j\gamma j(\alpha_y) j(\alpha_y)^{-1}\\
                                                                                                         &=j\gamma
\end{align*}

<p>
Hence \(h\) is a lift, as required.
</p>

</div>
</div>
</div>

<div id="outline-container-org7c77f33" class="outline-3">
<h3 id="org7c77f33">Factorisations</h3>
<div class="outline-text-3" id="text-org7c77f33">
<div class="lemma" id="orgc96eccd">
<p>
Every functor can be factored as a functor injective on objects, followed by a functor that is an isofibration and equivalence.
</p>

</div>

<div class="proof" id="org900bb51">
<p>
Given \(f:X \to Y\), we form a new category \(Z\) with objects given by \(X_0 \coprod Y_0\). We define the hom-sets as follows:
</p>
\begin{align*}
  Z(x,y) := \begin{cases}
    x \in X, y \in X &\implies Y(fx, fy),\\
    x \in X, y \in Y &\implies Y(fx, y),\\
    x \in Y, y \in X &\implies Y(x, fy),\\
    x \in Y, y \in Y &\implies Y(x, y).
  \end{cases}
\end{align*}

<p>
We then have a functor \(X \to Z\) which is the identity on objects, and \(f\) on maps, which, in particular, is injective on objects. We can also construct another functor \(Z \to Y\) which is formed by applying \(f\) to objects from \(X\) and the identity to objects from \(y\). It is then the identity morphism on maps, which means it is fully faithful. It is also surjective on objects as every object in \(Y\) is mapped to itself by this functor. The composite of these two morphisms is \(f\) on objects and \(f\) on maps, hence it is a factorisation of \(f\) into a functor injective on objects, followed by a surjective equivalence (which by Lemma 10) is an equivalence and isofibration), as required.
</p>

</div>

<div class="lemma" id="org0e2a8f5">
<p>
Every functor can be factored as a functor injective on objects and an equivalence, followed by an isofibration.
</p>

</div>

<div class="proof" id="orge0ca9a4">
<p>
Given \(f:X \to Y\) we form the comma category \(F \downarrow 1_Y\), then take the full subcategory spanned by objects \((x, y, \phi : fx \to y)\) where \(\phi\) is an isomorphism in \(Y\). Denote this category as \(F \downarrow_{\cong} 1_Y\)
Note that we have a functor \(X \to F \downarrow_{\cong} 1_Y\) defined by sending \(x \mapsto (x , fx, 1_{fx})\) and \(\alpha : x \to x' \mapsto (\alpha, f\alpha)\). This is clearly injective on objects and fully faithful. We also have that every \((x, y, \phi) \cong (x, fx, 1_{fx})\) by the following commuting square in \(Y\) (with horizontal maps being isomorphisms):
</p>
\begin{center}
  \begin{tikzcd}
    fx \ar[r, "f1_{x}"] \ar[d, "\phi"'] & fx \ar[d, "1_{fx}"] \\
    y \ar[r, "\phi^{-1}"'] & fx
  \end{tikzcd}
\end{center}

<p>
We have a functor \(f \downarrow_{\cong} 1_Y \to Y\) given by projecting out the second component. This functor is also seen to be an isofibration: given \((x, y, \phi)\) and an isomorphism \(\alpha : y \to y' \in Y\), the following square commutes, with horizontal maps isomorphisms, so is an isomorphism in \(f \downarrow_{\cong} 1_Y\):
</p>
\begin{center}
  \begin{tikzcd}
    fx \ar[r, "\phi"] \ar[d, "\phi"'] & y \ar[d, "\alpha"] \\
    y \ar[r, "\alpha"'] & y' 
  \end{tikzcd}
\end{center}
<p>
Our projection functor sends this isomorphism to \(\alpha\), so it is an isofibration. The composite of the two functors defined is easily seen to be equal to \(f\), completing the factorisation of \(f\) as an equivalence that is injective on objects, followed by an isofibration.
</p>

</div>
</div>
</div>
</div>

<div id="outline-container-org2a10e08" class="outline-2">
<h2 id="org2a10e08">Putting it all together</h2>
<div class="outline-text-2" id="text-org2a10e08">
<div class="corollary" id="org37a40d0">
<p>
Functors injective on objects and equivalences that are isofibrations, form a weak factorisation system on \(\mathbf{Cat}\).
</p>

</div>

<div class="proof" id="org36b2168">
<p>
Lemma 9 shows functors injective on objects are stable under retracts. Lemmas 9 and 9 show that equivalences that are isofibrations are also stable under retracts. Lemma 13 gives the desired lifting data and Lemma 14 gives the desired factorisation.
</p>

</div>

<div class="corollary" id="org8ad1995">
<p>
Equivalences that are injective on objects and isofibrations form a weak factorisation system on \(\mathbf{Cat}\).
</p>

</div>

<div class="proof" id="orgd4c7033">
<p>
Lemmas 7 and 9 show that the class of equivalences that are injective on objects is stable under retracts. Lemma 8 shows the class of isofibrations are stable under retracts. Lemma 12 gives the desired lifting data and Lemma 14 gives the desired factorisation.
</p>

</div>

<div class="corollary" id="org3af87b9">
<p>
The category \(\mathbf{Cat}\) has a model structure on it with:
</p>
<ol class="org-ol">
<li>\(W\) being the class of equivalences;</li>
<li>\(F\) being the class of isofibrations;</li>
<li>\(C\) being the class of functors injective on objects.</li>
</ol>

</div>

<div class="proof" id="org311be67">
<p>
Lemma shows that \(W\) satisfies 2-out-of-3. Corollaries 15 and 16 show that \((C \cap W, F)\) and \((C, F \cap W)\) are weak factorisation systems.
</p>

</div>

<p>
This proves Theorem 5. To see that this restricts to \(\mathbf{Gpd}\) we only need to realise that if \(X\) and \(Y\) are groupoids, the categories constructed in the Factorisations section are also groupoids. This means we have the following:
</p>

<div class="corollary" id="orge789810">
<p>
The category \(\mathbf{Gpd}\) has a model structure on it with:
</p>
<ol class="org-ol">
<li>\(W\) being the class of categorical equivalences;</li>
<li>\(F\) being the class of isofibrations;</li>
<li>\(C\) being the class of functors injective on objects.</li>
</ol>

</div>
</div>
</div>
<div class="taglist"></div>
<div class="post-date">05 Mar 2021</div><h1 class="post-title"><a href="https://jeslie0.github.io/2021-03-05-Zoom-screen-sharing.html">iPad Screen Sharing to Zoom on a University Network</a></h1>
<p>
I am currently a teaching assistant for a first year linear algebra course. We recently made the switch to a hybrid setup, meaning that I am streaming the tutorials on Zoom as well as talking to a class in-person. Instead of writing on the physical whiteboards in the classroom, I instead write on my iPad and share the screen through Zoom. Previously, when the tutorials were just based on Zoom, this setup worked pretty well - I can share my screen over Zoom using my home WiFi network. However, I can't screen share over the university network due to the way it is set up.
</p>

<div id="outline-container-org9e4a386" class="outline-2">
<h2 id="org9e4a386">Solution 1</h2>
<div class="outline-text-2" id="text-org9e4a386">
<p>
The basic solution is to log into the Zoom call on the iPad, and share the screen through the Zoom app. This is less than ideal, however; as it means that if you haven't turned off notifications, they can be displayed to the class. Also, I use the app GoodNotes to write my solutions on. The app is good, but there is a large header of different pen options that takes up too much space for my liking. This header is not shown when sharing content to Zoom over the network, rather than through the IPad.
</p>
</div>
</div>

<div id="outline-container-orgc160198" class="outline-2">
<h2 id="orgc160198">Solution 2</h2>
<div class="outline-text-2" id="text-orgc160198">
<p>
The current solution I use works on Windows 10 laptops. Windows 10 has the functionality to be connected to a network whilst also being a WiFi hotspot. Information on how to enable this can be found <a href="https://support.microsoft.com/en-us/windows/use-your-pc-as-a-mobile-hotspot-c89b0fad-72d5-41e8-f7ea-406ad9036b85">here</a>. Once the hotspot is up and running, we can connect the iPad to the network. Then, Zoom can detect the IPad, and we can share content over this network. So far, this has worked well for me. The only caveat is that it seems like you can't get access to the internet on the IPad whilst connected to the network. This isn't a major problem for me, as I still have access through my laptop.
</p>

<p>
This setup might work for other operating systems, but I am not able to test that theory out.
</p>
</div>
</div>
<div class="taglist"></div>
<div class="post-date">15 Apr 2019</div><h1 class="post-title"><a href="https://jeslie0.github.io/2019-04-15-is-zero-a-natural-number.html">Is zero a natural number?</a></h1>
<p>
I help tutor an introductory course on pure mathematics at Edinburgh University. One my responsibilities is to help answer questions that the students have in person and online on Piazza; a Q&amp;A forum used by the class. The other day, a student created a poll asking whether or not zero is a natural number. I have found that this question usually always splits the audience, with a majority usually favouring "no" as the correct answer. I remember the first time I came across this debate was during my final year of high school, when our teacher described the "home of zero" as a controversial topic. At that time, for no legitimate reason, I chose to believe that it should be a natural number and this choice has more or less stuck with me till this day. Being a student of pure mathematics, it does strike me as an odd that this causes such a debate. Having the natural numbers with or without zero doesn't affect mathematics in the slightest; we can simply define a new set to be the naturals with or without zero.
</p>

<p>
When debating against zero being natural, more often than not, one will make some form of an appeal to tradition. Usually, it goes something like: "people thought up and used other natural numbers before coming up with the concept of zero, so it is not natural". I personally don't think this is a good argument as we don't follow conventions from the past blindly; they can be updated and changed if necessary. A better (and also common) argument is that the naturals are used for counting. By starting our counting system at 1, the set \( \{1, 2, \ldots, n \}\) contains exactly \( n\) elements, while if treat \( 0\) as the start, then the set of elements up to \( n\) will have cardinality \( n+1\). If you have \( n\) objects, it seems more natural to put them in a bijection in the following way, your first object is identified with \( 1\), your second with \( 2\) and so on. This idea comes from treating the naturals just as an ordered set. There is no need for something to come before the object that we call <i>first</i>, and if there was, our language would arguably be nefarious. 
</p>

<p>
I think the most compelling argument for including zero in the natural numbers is from how the naturals are constructed through Peano's axioms. Simply, one starts with \( 0\) and applies a successor operation, \( S\) to it. This gives a new term \( S0\) which we treat as being distinct from \( 0\), by some of Peano's other axioms. We then define \( 1:= S0\), and in general define \( n:= S(n-1)\). Peano's axioms; however, don't construct a set, per se, but a <i>Peano Structure</i>. By saying this is not a set, I mean in the same sense that a group is not a set, but a set with structure, not that it forms a proper class. There are many different Peano structures, but the naturals with \( 0\) and the usual successor function, \( - + 1\) satisfy a nice universal property. We can define a category whose objects are (set based) Peano structures, that is, triples \( (X, S:X \rightarrow X, a \in X)\) and whose maps \( f: (X, S, a) \rightarrow (Y, S', b)\) are functions \( f:X \rightarrow Y\) that make the following commute:
</p>

<p>
\[\begin{tikzcd} 1 \ar[r, "a"] \ar[rd, "b"'] & X \ar[r, "S"] \ar[d, "f"] & X \ar[d, "f"] \\
 & Y \ar[r, "S'"'] & Y\end{tikzcd}\]
</p>

<p>
The universal property satisfied by \( (\mathbb{N}, S, 0)\) is that it is initial in this category, that is, given any other object \( (Y, S', b \in Y)\), there is a unique map \( f: (\mathbb{N}, S, 0) \rightarrow (Y, S', b )\). This effectively is what lets us define functions recursively. From a category theory perspective, \( 0:1 \rightarrow \mathbb{N}\) is a generalised element of \( \mathbb{N}\). However, we could equally define an isomorphic copy of our initial Peano structure by swapping some symbols around and renaming our generalised element "0" as "1". Then, applying the obvious forgetful functor we can get something that looks like a natural number object, but starts at 1. This leads me to a critique of most arguments about the naturality of zero: mostly the argument revolves around what it means to be a natural number, when really it should be based on what it means to be <i>zero.</i> 
</p>

<p>
When speaking in terms of sets, the only difference between the naturals with or without zero, is what we call the elements. As a set, the element \( 0 \in \mathbb{N}\) can be interpreted to be any element we want, precisely because there is no structure on a set. If we were feeling perverse, we could say that \( 0+1 = 7\), simply by interpreting the symbols differently. It is when we add certain structure that the notion of zero becomes necessary. If we are needing an additive identity then the natural numbers begin to resemble a monoid and hence should be taken to include a zero. Are we simply counting objects or treating the naturals as an ordered set? Then there is no need for the additive identity, so the first element should probably be \( 1\).
</p>

<p>
So is zero a natural number? In my opinion, that depends on the problem you are working on. I think the reason that most people say that zero is not part of the naturals, is due to them thinking of the naturals as being an ordered set. This concept is taught much earlier in people's lives than the idea of a monoid, or just the notion of an identity. This debate won't be over any time soon, but hopefully people can start understanding the other side of the debate and see that both notions of the natural numbers make sense in their given context.
</p>
<div class="taglist"></div><div id="archive">
<a href="https://jeslie0.github.io/archive.html">Other posts</a>
</div>
]]></description>
  <link>https://jeslie0.github.io/index.html</link>
  <guid>https://jeslie0.github.io/index.html</guid>
  <pubDate>Fri, 18 Feb 2022 19:49:27 +0000</pubDate>
</item>
<item>
  <title><![CDATA[Stoicism and raising a puppy]]></title>
  <description><![CDATA[
<p>
A month or two ago, my girlfriend, her brother and I went for a drive and came back with a puppy. My girlfriend had been wanting a puppy for many years; now that the day had come where she would get to take one home, she was beaming more than ever. When I lived in Scotland, my family raised and loved a yellow labrador (named Bobby), so I knew what to expect from the coming months. Or so I thought. Bobby came into my life when I was a mere 10 years old, so most of my memories of him are from the later stages in his life. My parents' memories of this time will probably be better than mine. I have the occasional memory of Bobby chewing on the skirting boards and urinating behind the sofa, but apart from that, he is a dream dog in my mind.
</p>

<p>
The new puppy (Woody) makes me doubt the integrity of my previous memories. Woody is a chocolate labrador, with an apt name. Anything in our vicinity made of wood will end up suffering the misfortune of being chewed on. The list of casualties includes chairs, desks, tables, skirting boards, book shelves, notebooks and, of course, twigs and branches. This is only the list of his wooden feasts. Woody also has a real taste for plastic and metal, which unfortunately we found out when he chewed his way through my girlfriend's bike's chain guard.
</p>

<p>
This brings me to my first reflection on Stoicism. Keeping a puppy that tries to destroy everything in reach reminded me of the temporary nature of belongings. It is far too easy to forget that even though we purchase items, they don't last forever. Even if they do out last us, we don't take them with us. We should appreciate what we have while we have it.
</p>

<p>
My second reflection is about anger. Before Woody came into my life, I thought that I was very hard to anger: I can't remember a recent time that felt really angry. Now though, it seems like every day my anger rises to the surface. This usually happens when Woody thinks it's a good idea to go around trying to eat everything in the house, including computer cables. When this happens, I have a real desire to punish Woody, but really this is only anger trying to take control. Punishment in the form of yelling or hitting serves no good, even in trying to get Woody's behaviour to change. Some say that it can even reinforce the behaviour. The only reason I have a desire to punish him is because of the anger that bubbles up. The only purpose it serves is as a release for me. I need to accept that chewing is a part of his nature, especially now that he is teething. The best thing to do is to try and redirect his attention to one of his many toys, designed for withstanding his mighty chomp. When he can't be redirected, it's time for him to sleep.
</p>

<p>
When my girlfriend and I were planning living with a new dog, I didn't think that Stoic values would be an important factor in raising it. I am glad that I was wrong.
</p>

<p>
Attached is a picture of the (not so little) Woody. Today, he has been a real star of a puppy and as I type this, he is fast asleep in his bed.
</p>

<figure id="org4bfec14">
<img src="../images/blog/woody.jpeg" alt="woody.jpeg" width="300" class="rounded corners">

</figure>
<div class="taglist"></div>]]></description>
  <link>https://jeslie0.github.io/2021-06-08-Stoicism-and-raising-a-puppy.html</link>
  <guid>https://jeslie0.github.io/2021-06-08-Stoicism-and-raising-a-puppy.html</guid>
  <pubDate>Tue, 08 Jun 2021 00:00:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[The Canonical Model Structure on Cat/Gpd]]></title>
  <description><![CDATA[
<p>
When one first starts studying category theory, they learn that the correct notion of "the same" for categories is that of equivalence, rather than the stronger notion isomorphism. For those that have studied some algebraic topology, the situation is very similar to identifying spaces if they are homotopic, rather than homeomorphic. This is often given as an analogy, but the two notions can be reconciled by giving model structures where the weaker form of identification forms the subcategory of weak equivalences. Here, we define and present the so called canonical model structure on the category of categories. The proof of each step given can also be applied to the category of groupoids. 
</p>

<p>
We denote the category of (small) categories by \(\mathbf{Cat}\) and the category of (small) groupoids \(\mathbf{Gpd}\).
</p>

<p>
This proof can be found on the nLab's "<a href="https://ncatlab.org/nlab/show/canonical+model+structure+on+Cat">canonical model structure on Cat</a>" page, but here we go into a lot more detail of the constructions.
</p>
<div id="outline-container-org2843360" class="outline-2">
<h2 id="org2843360">The model structure</h2>
<div class="outline-text-2" id="text-org2843360">
<div class="definition" id="orgadd9aa9">
<p>
Let \(C\) be a category and \((A, B)\) a pair of subcategories. The pair \((A, B)\) is a <i>weak factorisation system</i> if:
</p>
<ol class="org-ol">
<li>Both \(A\) and \(B\) are stable under retracts;</li>
<li>\(A\) is in the left lifting class of \(B\) (\(A \subset LB\));</li>
<li>Every morphism \(f : X \to Y\) in \(C\) factors as \(f = pi\) with \(i \in A\) and \(p \in B\).</li>
</ol>

</div>

<div class="definition" id="org95c657a">
<p>
A <i>model structure</i> on a category \(\mathcal{C}\) consists of a triple of wide subcategories \(W, F, C \) whose morphisms are called <i>weak equivalences</i> (anotated with a \(\sim\)), <i>fibrations</i> (annotated with a double head \(\twoheadrightarrow\)) and <i>cofibrations</i> (annotated with a tail \(\rightarrowtail\)), respectively. This triple must satisfy the following three axioms:
</p>
<ol class="org-ol">
<li>\(W\) satisfies 2-out-of-3;</li>
<li>\((F, W \cap C)\) is a weak factorisation system;</li>
<li>\((F \cap W, C)\) is a weak factorisation system.</li>
</ol>

</div>

<div class="definition" id="orgcdc51c8">
<p>
A <i>model category</i> is a finitely bicomplete category, along with a model structure on it.
</p>

</div>

<p>
Before giving the main result, we need one more definition.
</p>

<div class="definition" id="org8b48181">
<p>
Let \(F: \mathcal{A} \to \mathcal{B}\) be a functor. We say \(F\) is an <i>isofibration</i> if for every \(a \in \mathcal{A}\) and isomorphism \(f : Fa \to b \in \mathcal{B}\), there is an isomorphism \(g: a \to a' \in \mathcal{A}\) such that \(Ff = g\).
</p>

</div>

<p>
Our main result is the following:
</p>
<div class="theorem" id="orgeb95f40">
<p>
The category \(\mathbf{Cat}\) has a model structure on it with:
</p>
<ol class="org-ol">
<li>\(W\) being the class of categorical equivalences;</li>
<li>\(F\) being the class of isofibrations;</li>
<li>\(C\) being the class of functors injective on objects.</li>
</ol>

</div>

<p>
The rest of this section will be proving the above theorem. That \(\mathbf{Cat}\) and \(\mathbf{Gpd}\) has all finite limits follows from it having a terminal object, binary products and equalisers. The theory of categories and groupoids are generalised algebraic theories, so the category of models (\(\mathbf{Cat}\) and \(\mathbf{Gpd}\), respectively) has all (finite) colimits.
</p>

<p>
We now break down each of the defining features of a model structure and show that they hold here.
</p>
</div>

<div id="outline-container-orga099778" class="outline-3">
<h3 id="orga099778">2-out-of-3</h3>
<div class="outline-text-3" id="text-orga099778">
<div class="lemma" id="orga224df2">
<p>
Categorical equivalences are closed under 2-out-of-3.
</p>

</div>

<div class="proof" id="orgb972bc0">
<p>
This follows by basic diagram chasing. If we have the following commuting triangle, with any two maps being equivalences, we can take pseudo-inverses to construct a pseudo-inverse to the third map.
</p>
\begin{center}
  \begin{tikzcd}
    X \ar[rr, "f"] \ar[rd, "g"'] & & Y \\
    & Z \ar[ru, "h"'] &
  \end{tikzcd}
\end{center}

</div>
</div>
</div>

<div id="outline-container-org29bbb0f" class="outline-3">
<h3 id="org29bbb0f">Retracts</h3>
<div class="outline-text-3" id="text-org29bbb0f">
<div class="lemma" id="org5bed558">
<p>
The class of categorical equivalences is stable under retracts.
</p>

</div>

<div class="proof" id="org0affbd8">
<p>
Suppose we have the following commuting diagram where \(g\) is an equivalence. We show \(f\) is also an equivalence:
</p>
\begin{center}
  \begin{tikzcd}
    X \arrow[r, "i"] \arrow[d, "f"] \arrow[rr, "1_X", bend left] & U \arrow[r, "u"] \arrow[d, "\sim", "g"'] & X \arrow[d, "f"] \\
    Y \arrow[r, "j"] \arrow[rr, "1_Y", bend right]               & V \arrow[r, "v"]                   & Y               
  \end{tikzcd}
\end{center}

<p>
Since \(g\) is an equivalence, there exists a functor \(g'\) such that \(gg' \cong 1_V\) and \(g'g \cong 1_U\). The morphism \(pg'j\) is then easily seen to be a pseudo-inverse to \(f\), showing that it is also an equivalence.
</p>

</div>

<div class="lemma" id="org703ed12">
<p>
The class of isofibrations is stable under retracts.
</p>

</div>

<div class="proof" id="org2546d1e">
<p>
Suppose the following diagram commutes and \(g\) is an isofibration. We need to show that \(f\) is an isofibration also:
</p>
\begin{center}
  \begin{tikzcd}
    X \arrow[r, "i"] \arrow[d, "f"] \arrow[rr, "1_X", bend left] & U \arrow[r, "p"] \arrow[d, "g", two heads] & X \arrow[d, "f"] \\
    Y \arrow[r, "j"] \arrow[rr, "1_Y", bend right]               & V \arrow[r, "q"]                           & Y               
  \end{tikzcd}
\end{center}
<p>
Let \(x \in X\) and \(\alpha : fx \to y\) be an isomorphism in \(Y\). We apply \(j\) to get an isomorphism \(j\alpha : jfx=gix \to jy\). As \(g\) is an isofibration, there is an isomorphism \(\beta : ix \to u \in U\) such that \(g\beta = j\alpha\). Applying \(p\), we have an isomorphism \(p\beta : pix=x \to pu \in X\). If we apply \(f\) to this map, we have:
</p>
\begin{align*}
  fp\beta &= qg\beta && \text{right square}\\
          &= qj\alpha && \text{definition of }\beta\\
          &= \alpha.
\end{align*}
<p>
Hence, given an isomorphism \(\alpha\), there exists an isomorphism \(p\beta\) such that \(fp\beta = \alpha\), so \(f\) is also an isofibration.
</p>

</div>

<div class="lemma" id="org432c6e6">
<p>
The class of functors injective on objects is stable under retracts.
</p>

</div>

<div class="proof" id="orgb15a8d9">
<p>
Suppose we have the following diagram in \(\mathbf{Cat}\), where \(g\) is a functor injective on objects. We need to show that \(f\) is injective on objects also:
</p>
\begin{center}
  \begin{tikzcd}
    X \arrow[r, "i"] \arrow[d, "f"] \arrow[rr, "1_X", bend left] & U \arrow[r, "p"] \arrow[d, "g", tail] & X \arrow[d, "f"] \\
    Y \arrow[r, "j"] \arrow[rr, "1_Y", bend right]               & V \arrow[r, "q"]                      & Y               
  \end{tikzcd}
\end{center}

<p>
Suppose \(x\) and \(y\) are objects in \(X\) such that \(fx = fy\). We have the following chain of equalities:
</p>
\begin{align*}
  fx = fy &\implies jfx=jfy\\
          &\implies gix=giy && \text{(left square)}\\
          &\implies ix=iy && (g \in C)\\
          &\implies pix=piy\\
          &\implies x=y.
\end{align*}
<p>
Hence \(f\) is also injective on objects.
</p>

</div>
</div>
</div>

<div id="outline-container-orgca7c4d4" class="outline-3">
<h3 id="orgca7c4d4">Lifting properties</h3>
<div class="outline-text-3" id="text-orgca7c4d4">
<p>
We first give a lemma that will be useful in solving the lifting problems in this section.
</p>

<div class="lemma" id="orge8f9267">
<p>
Isofibrations that are equivalences are exactly the equivalences that are surjective on objects.
</p>

</div>

<div class="proof" id="orge2133c3">
<p>
Suppose that \(F: \mathcal{A} \to \mathcal{B}\) is an isofibration and an equivalence. To see that it is surjective on objects, let \(b \in B\). As \(F\) is an equivalence, it is fully faithful, so there is some \(a \in \mathcal{A}\) and isomorphism \(\beta : Fa \to b \in \mathcal{B}\). As \(F\) is an isofibration, there is an isomorphism \(\alpha : a \to a' \in \mathcal{A}\) such that \(F\alpha = \beta\). Then, we must have that \(Fa' = b\), so \(F\) is surjective on objects.
</p>

<p>
If \(F\) is an equivalence that is surjective on objects, it is also an isofibration. Let \(a \in \mathcal{A}\) and \(\beta : Fa \to b\) be an isomorphism in \(\mathcal{B}\). As \(F\) is surjective on objects, \(b = Fa'\) for some \(a' \in \mathcal{A}\), so \(\beta\) is a map \(Fa \to Fa'\). By \(F\) being full, there is a morphism \(\alpha : a \to a'\) such that \(F\alpha = \beta\). By \(F\) being faithful, this \(\alpha\) must be an isomorphism, so \(F\) is an isofibration.
</p>

</div>

<div class="lemma" id="orgdccfe53">
<p>
The class of functors injective on objects has the left lifting property with respect to functors that are isofibrations and equivalences.
</p>

</div>

<div class="proof" id="orga6faccc">
<p>
Suppose we have the following commuting diagram, where \(f\) is injective on objects and \(g\) is an equivalence and isofibration:
</p>
\begin{center}
  \begin{tikzcd}
    X \arrow[r, "i"] \arrow[d, "f"', tail] & U \arrow[d, "g"', "\sim", two heads] \\
    Y \arrow[r, "j"']                      & V                             
  \end{tikzcd}
\end{center}

<p>
As this commutes, we have the following ``object square'' commuting in \(\mathbf{Set}\):
</p>
\begin{center}
  \begin{tikzcd}
    X_0 \arrow[r, "i_0"] \arrow[d, "f_0"', tail] & U_0 \arrow[d, "g_0", two heads] \\
    Y_0 \arrow[r, "j_0"']                        & V_0                            
  \end{tikzcd}
\end{center}

<p>
In particular, \(f_0\) is injective and by Lemma 10, \(g_0\) is surjective. As \((\text{inj}, \text{surj})\) form a weak factorisation system on \(\mathbf{Set}\), there is a lift \(h_0\). We now aim to turn \(h_0\) into a functor. Let \(\alpha: y \to y'\) be a morphism in \(Y\). We then have a morphism \(j\alpha : jy = gh_0y \to gh_0y'=jy' \in V_0\). As \(g\) is fully faithful, there is a unique morphism \(\beta : h_0 y \to h_0 y' \in U\) such that \(g\beta = j\alpha\). We define \(h\alpha := \beta\). As \(j\) is a functor, it must preserve identity morphisms and as \(g\) is fully faithful, the lift of an identity morphism from \(v\) to \(u\) must be the identity, so \(h\) preserves identity morphisms. Similarly, by functorality of \(j\) and fully faithfulness of \(g\), we have that composites are mapped to composites, so \(h\) is a functor and makes the bottom triangle commute:
</p>
\begin{center}
  \begin{tikzcd}
    X \arrow[r, "i"] \arrow[d, "f"', tail] & U \arrow[d, "g"', "\sim", two heads] \\
    Y \arrow[r, "j"']  \ar[ru, "h"]                    & V                             
  \end{tikzcd}
\end{center}

<p>
The top triangle commutes on objects, so we need to check it commutes on maps. Given \(\alpha : x \to x' \in X\),
</p>
\begin{align*}
  g i \alpha &= j f \alpha\\
             &= g h f \alpha
\end{align*}
<p>
So \(i \alpha = h f \alpha\) by fully faithfulness of \(g\), meaning that the top triangle commutes. This means that \(h\) is indeed a lift, which shows that functors injective on objects are in the left lifting class of fucntors that are equivalences and isofibrations.
</p>

</div>

<div class="lemma" id="org2a9302a">
<p>
The class of functors injective on objects which are also equivalences has the left lifting property with respect to functors that are isofibrations.
</p>

</div>

<div class="proof" id="orgb701f41">
<p>
Suppose we have the following diagram commuting, with \(f\) an equivalence that is injective on objects and \(g\) an isofibration:
</p>
\begin{center}
  \begin{tikzcd}
    X \arrow[r, "i"] \arrow[d, "f"', "\sim", tail] & U \arrow[d, "g", two heads] \\
    Y \arrow[r, "j"']                      & V                          
  \end{tikzcd}
\end{center}

<p>
To construct a functor \(h:Y \to U\), we use the axiom of choice to get some extra structure. As \(f\) is essentially surjective, for every object \(y \in Y\), we choose an isomorphism \(\alpha_y : fx_y \to y\), picking the identity morphism wherever possible, i.e \(\alpha_{fx} = 1_{fx}\) (we call the argument of \(f\) \(x_y\), which is well defined at \(f\) is injective on objects). As \(g\) is an isofibration, we choose for every \(y \in Y\) a morphism \(\beta_y : ix_y \to u_y \in U\) such that \(g\beta_y = j\alpha_y\), again, picking the identity morphism whenever possible, i.e \(\beta_{fx} = 1_{ix}\). On objects, we define \(h(y) = u_y\). For morphisms, the output is a little more complicated. Starting with a map \(\gamma : y \to y'\), we form the composite \(\alpha_{y'}^{-1} \gamma \alpha_y : fx_y \to fx_{y'}\). We let \(\overline{\alpha_{y'}^{-1} \gamma \alpha_y} : x_y \to x_{y'}\) be the unique map that \(f\) maps to \(\alpha_{y'}^{-1} \gamma \alpha_y\). Then, applying \(i\), we have a map \(i \overline{\alpha_{y'}^{-1} \gamma \alpha_y} : ix_y \to ix_{y'}\). We can then compose with maps \(\beta_y^{-1}\) and \(\beta_{y'}\) to get \(\beta_{y'} i \left(\overline{\alpha_{y'}^{-1} \gamma \alpha_y}\right) \beta_{y}^{-1} : u_y \to u_{y'}\). This is what we define \(h\gamma\) to be.
</p>

<p>
To see that \(h\) is a functor, we see that it sends the identity to the identity:
</p>
\begin{align*}
  \beta_{y} i \left(\overline{\alpha_{y}^{-1} 1_y \alpha_y}\right) \beta_{y}^{-1} &= \beta_y i\left( \overline{1_y}\right) \beta_y^{-1} \\
  &= \beta_y i(1_{x_y}) \beta_y^{-1}\\
  &=1_{u_y}.
\end{align*}
<p>
We also see that \(h\) preserves composites: let \(\gamma : y \to y'\) and \(\delta : y' \to y''\). Then:
</p>
\begin{align*}
  \beta_{y''} i \left(\overline{\alpha_{y''}^{-1} \delta \alpha_{y'}}\right) \beta_{y'}^{-1} \circ \beta_{y'} i \left(\overline{\alpha_{y'}^{-1}\gamma \alpha_y}\right) \beta_y^{-1} &=  \beta_{y''} i \left( \overline{\alpha_{y''}^{-1} \delta \alpha_{y'}}\right) i \left( \overline{\alpha_{y'}^{-1}\gamma \alpha_y}\right) \beta_y^{-1}\\
                                                                                                                                                                                     &= \beta_{y''}i \left( \overline{\alpha_{y''}^{-1} \delta \alpha_{y'}} \circ \overline{\alpha_{y'}^{-1} \gamma \alpha_y} \right) \beta_y^{-1}\\
  &= \beta_{y''} i \left( \alpha^{-1}_{y''} \delta \gamma \alpha_y \right) \beta_y^{-1}
\end{align*}

<p>
We now show that it makes both the triangles commute:
</p>
\begin{center}
  \begin{tikzcd}
    X \arrow[r, "i"] \arrow[d, "\sim", "f"', tail] & U \arrow[d, "g", two heads] \\
    Y \arrow[r, "j"'] \arrow[ru, "h"]      & V                          
  \end{tikzcd}
\end{center}

<p>
Given \(x \in X\), we need \(ix = u_{fx}\), however this follows from our choice of maps being the identity wherever possible, which means \(\beta_{fx} = 1_{ix}\). Likewise, for maps \(\gamma: x \to x'\), our chosen isomorphisms are the identity, giving \(hf\gamma = i\gamma\). Now, if \(y \in Y\), we see by definition that \(gu_y = jy\), so the bottom triangle commutes on objects. Given a map \(\gamma : y \to y' \in Y\), by the properties of \(\beta_y\) we have:
</p>
\begin{align*}
  g\left( \beta_{y'} i \left(\overline{\alpha_{y'}^{-1} \gamma \alpha_y}\right) \beta_{y}^{-1} \right) &= g(\beta_{y'}) gi \left(\overline{\alpha_{y'}^{-1} \gamma \alpha_y}\right) g(\beta_{y})^{-1}\\
                                                                                                         &= j(\alpha_{y'}) jf \left( \overline{\alpha_{y'}^{-1} \gamma \alpha_y} \right) j(\alpha_y)^{-1}\\
                                                                                                         &= j(\alpha_{y'}) j(\alpha_{y'})^{-1} j\gamma j(\alpha_y) j(\alpha_y)^{-1}\\
                                                                                                         &=j\gamma
\end{align*}

<p>
Hence \(h\) is a lift, as required.
</p>

</div>
</div>
</div>

<div id="outline-container-org7c77f33" class="outline-3">
<h3 id="org7c77f33">Factorisations</h3>
<div class="outline-text-3" id="text-org7c77f33">
<div class="lemma" id="orgc96eccd">
<p>
Every functor can be factored as a functor injective on objects, followed by a functor that is an isofibration and equivalence.
</p>

</div>

<div class="proof" id="org900bb51">
<p>
Given \(f:X \to Y\), we form a new category \(Z\) with objects given by \(X_0 \coprod Y_0\). We define the hom-sets as follows:
</p>
\begin{align*}
  Z(x,y) := \begin{cases}
    x \in X, y \in X &\implies Y(fx, fy),\\
    x \in X, y \in Y &\implies Y(fx, y),\\
    x \in Y, y \in X &\implies Y(x, fy),\\
    x \in Y, y \in Y &\implies Y(x, y).
  \end{cases}
\end{align*}

<p>
We then have a functor \(X \to Z\) which is the identity on objects, and \(f\) on maps, which, in particular, is injective on objects. We can also construct another functor \(Z \to Y\) which is formed by applying \(f\) to objects from \(X\) and the identity to objects from \(y\). It is then the identity morphism on maps, which means it is fully faithful. It is also surjective on objects as every object in \(Y\) is mapped to itself by this functor. The composite of these two morphisms is \(f\) on objects and \(f\) on maps, hence it is a factorisation of \(f\) into a functor injective on objects, followed by a surjective equivalence (which by Lemma 10) is an equivalence and isofibration), as required.
</p>

</div>

<div class="lemma" id="org0e2a8f5">
<p>
Every functor can be factored as a functor injective on objects and an equivalence, followed by an isofibration.
</p>

</div>

<div class="proof" id="orge0ca9a4">
<p>
Given \(f:X \to Y\) we form the comma category \(F \downarrow 1_Y\), then take the full subcategory spanned by objects \((x, y, \phi : fx \to y)\) where \(\phi\) is an isomorphism in \(Y\). Denote this category as \(F \downarrow_{\cong} 1_Y\)
Note that we have a functor \(X \to F \downarrow_{\cong} 1_Y\) defined by sending \(x \mapsto (x , fx, 1_{fx})\) and \(\alpha : x \to x' \mapsto (\alpha, f\alpha)\). This is clearly injective on objects and fully faithful. We also have that every \((x, y, \phi) \cong (x, fx, 1_{fx})\) by the following commuting square in \(Y\) (with horizontal maps being isomorphisms):
</p>
\begin{center}
  \begin{tikzcd}
    fx \ar[r, "f1_{x}"] \ar[d, "\phi"'] & fx \ar[d, "1_{fx}"] \\
    y \ar[r, "\phi^{-1}"'] & fx
  \end{tikzcd}
\end{center}

<p>
We have a functor \(f \downarrow_{\cong} 1_Y \to Y\) given by projecting out the second component. This functor is also seen to be an isofibration: given \((x, y, \phi)\) and an isomorphism \(\alpha : y \to y' \in Y\), the following square commutes, with horizontal maps isomorphisms, so is an isomorphism in \(f \downarrow_{\cong} 1_Y\):
</p>
\begin{center}
  \begin{tikzcd}
    fx \ar[r, "\phi"] \ar[d, "\phi"'] & y \ar[d, "\alpha"] \\
    y \ar[r, "\alpha"'] & y' 
  \end{tikzcd}
\end{center}
<p>
Our projection functor sends this isomorphism to \(\alpha\), so it is an isofibration. The composite of the two functors defined is easily seen to be equal to \(f\), completing the factorisation of \(f\) as an equivalence that is injective on objects, followed by an isofibration.
</p>

</div>
</div>
</div>
</div>

<div id="outline-container-org2a10e08" class="outline-2">
<h2 id="org2a10e08">Putting it all together</h2>
<div class="outline-text-2" id="text-org2a10e08">
<div class="corollary" id="org37a40d0">
<p>
Functors injective on objects and equivalences that are isofibrations, form a weak factorisation system on \(\mathbf{Cat}\).
</p>

</div>

<div class="proof" id="org36b2168">
<p>
Lemma 9 shows functors injective on objects are stable under retracts. Lemmas 9 and 9 show that equivalences that are isofibrations are also stable under retracts. Lemma 13 gives the desired lifting data and Lemma 14 gives the desired factorisation.
</p>

</div>

<div class="corollary" id="org8ad1995">
<p>
Equivalences that are injective on objects and isofibrations form a weak factorisation system on \(\mathbf{Cat}\).
</p>

</div>

<div class="proof" id="orgd4c7033">
<p>
Lemmas 7 and 9 show that the class of equivalences that are injective on objects is stable under retracts. Lemma 8 shows the class of isofibrations are stable under retracts. Lemma 12 gives the desired lifting data and Lemma 14 gives the desired factorisation.
</p>

</div>

<div class="corollary" id="org3af87b9">
<p>
The category \(\mathbf{Cat}\) has a model structure on it with:
</p>
<ol class="org-ol">
<li>\(W\) being the class of equivalences;</li>
<li>\(F\) being the class of isofibrations;</li>
<li>\(C\) being the class of functors injective on objects.</li>
</ol>

</div>

<div class="proof" id="org311be67">
<p>
Lemma shows that \(W\) satisfies 2-out-of-3. Corollaries 15 and 16 show that \((C \cap W, F)\) and \((C, F \cap W)\) are weak factorisation systems.
</p>

</div>

<p>
This proves Theorem 5. To see that this restricts to \(\mathbf{Gpd}\) we only need to realise that if \(X\) and \(Y\) are groupoids, the categories constructed in the Factorisations section are also groupoids. This means we have the following:
</p>

<div class="corollary" id="orge789810">
<p>
The category \(\mathbf{Gpd}\) has a model structure on it with:
</p>
<ol class="org-ol">
<li>\(W\) being the class of categorical equivalences;</li>
<li>\(F\) being the class of isofibrations;</li>
<li>\(C\) being the class of functors injective on objects.</li>
</ol>

</div>
</div>
</div>
<div class="taglist"></div>]]></description>
  <link>https://jeslie0.github.io/2021-03-06-Canonical-Model-Structure-on-Cat.html</link>
  <guid>https://jeslie0.github.io/2021-03-06-Canonical-Model-Structure-on-Cat.html</guid>
  <pubDate>Sat, 06 Mar 2021 00:00:00 +0000</pubDate>
</item>
<item>
  <title><![CDATA[iPad Screen Sharing to Zoom on a University Network]]></title>
  <description><![CDATA[
<p>
I am currently a teaching assistant for a first year linear algebra course. We recently made the switch to a hybrid setup, meaning that I am streaming the tutorials on Zoom as well as talking to a class in-person. Instead of writing on the physical whiteboards in the classroom, I instead write on my iPad and share the screen through Zoom. Previously, when the tutorials were just based on Zoom, this setup worked pretty well - I can share my screen over Zoom using my home WiFi network. However, I can't screen share over the university network due to the way it is set up.
</p>

<div id="outline-container-org9e4a386" class="outline-2">
<h2 id="org9e4a386">Solution 1</h2>
<div class="outline-text-2" id="text-org9e4a386">
<p>
The basic solution is to log into the Zoom call on the iPad, and share the screen through the Zoom app. This is less than ideal, however; as it means that if you haven't turned off notifications, they can be displayed to the class. Also, I use the app GoodNotes to write my solutions on. The app is good, but there is a large header of different pen options that takes up too much space for my liking. This header is not shown when sharing content to Zoom over the network, rather than through the IPad.
</p>
</div>
</div>

<div id="outline-container-orgc160198" class="outline-2">
<h2 id="orgc160198">Solution 2</h2>
<div class="outline-text-2" id="text-orgc160198">
<p>
The current solution I use works on Windows 10 laptops. Windows 10 has the functionality to be connected to a network whilst also being a WiFi hotspot. Information on how to enable this can be found <a href="https://support.microsoft.com/en-us/windows/use-your-pc-as-a-mobile-hotspot-c89b0fad-72d5-41e8-f7ea-406ad9036b85">here</a>. Once the hotspot is up and running, we can connect the iPad to the network. Then, Zoom can detect the IPad, and we can share content over this network. So far, this has worked well for me. The only caveat is that it seems like you can't get access to the internet on the IPad whilst connected to the network. This isn't a major problem for me, as I still have access through my laptop.
</p>

<p>
This setup might work for other operating systems, but I am not able to test that theory out.
</p>
</div>
</div>
<div class="taglist"></div>]]></description>
  <link>https://jeslie0.github.io/2021-03-05-Zoom-screen-sharing.html</link>
  <guid>https://jeslie0.github.io/2021-03-05-Zoom-screen-sharing.html</guid>
  <pubDate>Fri, 05 Mar 2021 00:00:00 +0000</pubDate>
</item>
<item>
  <title><![CDATA[Is zero a natural number?]]></title>
  <description><![CDATA[
<p>
I help tutor an introductory course on pure mathematics at Edinburgh University. One my responsibilities is to help answer questions that the students have in person and online on Piazza; a Q&amp;A forum used by the class. The other day, a student created a poll asking whether or not zero is a natural number. I have found that this question usually always splits the audience, with a majority usually favouring "no" as the correct answer. I remember the first time I came across this debate was during my final year of high school, when our teacher described the "home of zero" as a controversial topic. At that time, for no legitimate reason, I chose to believe that it should be a natural number and this choice has more or less stuck with me till this day. Being a student of pure mathematics, it does strike me as an odd that this causes such a debate. Having the natural numbers with or without zero doesn't affect mathematics in the slightest; we can simply define a new set to be the naturals with or without zero.
</p>

<p>
When debating against zero being natural, more often than not, one will make some form of an appeal to tradition. Usually, it goes something like: "people thought up and used other natural numbers before coming up with the concept of zero, so it is not natural". I personally don't think this is a good argument as we don't follow conventions from the past blindly; they can be updated and changed if necessary. A better (and also common) argument is that the naturals are used for counting. By starting our counting system at 1, the set \( \{1, 2, \ldots, n \}\) contains exactly \( n\) elements, while if treat \( 0\) as the start, then the set of elements up to \( n\) will have cardinality \( n+1\). If you have \( n\) objects, it seems more natural to put them in a bijection in the following way, your first object is identified with \( 1\), your second with \( 2\) and so on. This idea comes from treating the naturals just as an ordered set. There is no need for something to come before the object that we call <i>first</i>, and if there was, our language would arguably be nefarious. 
</p>

<p>
I think the most compelling argument for including zero in the natural numbers is from how the naturals are constructed through Peano's axioms. Simply, one starts with \( 0\) and applies a successor operation, \( S\) to it. This gives a new term \( S0\) which we treat as being distinct from \( 0\), by some of Peano's other axioms. We then define \( 1:= S0\), and in general define \( n:= S(n-1)\). Peano's axioms; however, don't construct a set, per se, but a <i>Peano Structure</i>. By saying this is not a set, I mean in the same sense that a group is not a set, but a set with structure, not that it forms a proper class. There are many different Peano structures, but the naturals with \( 0\) and the usual successor function, \( - + 1\) satisfy a nice universal property. We can define a category whose objects are (set based) Peano structures, that is, triples \( (X, S:X \rightarrow X, a \in X)\) and whose maps \( f: (X, S, a) \rightarrow (Y, S', b)\) are functions \( f:X \rightarrow Y\) that make the following commute:
</p>

<p>
\[\begin{tikzcd} 1 \ar[r, "a"] \ar[rd, "b"'] & X \ar[r, "S"] \ar[d, "f"] & X \ar[d, "f"] \\
 & Y \ar[r, "S'"'] & Y\end{tikzcd}\]
</p>

<p>
The universal property satisfied by \( (\mathbb{N}, S, 0)\) is that it is initial in this category, that is, given any other object \( (Y, S', b \in Y)\), there is a unique map \( f: (\mathbb{N}, S, 0) \rightarrow (Y, S', b )\). This effectively is what lets us define functions recursively. From a category theory perspective, \( 0:1 \rightarrow \mathbb{N}\) is a generalised element of \( \mathbb{N}\). However, we could equally define an isomorphic copy of our initial Peano structure by swapping some symbols around and renaming our generalised element "0" as "1". Then, applying the obvious forgetful functor we can get something that looks like a natural number object, but starts at 1. This leads me to a critique of most arguments about the naturality of zero: mostly the argument revolves around what it means to be a natural number, when really it should be based on what it means to be <i>zero.</i> 
</p>

<p>
When speaking in terms of sets, the only difference between the naturals with or without zero, is what we call the elements. As a set, the element \( 0 \in \mathbb{N}\) can be interpreted to be any element we want, precisely because there is no structure on a set. If we were feeling perverse, we could say that \( 0+1 = 7\), simply by interpreting the symbols differently. It is when we add certain structure that the notion of zero becomes necessary. If we are needing an additive identity then the natural numbers begin to resemble a monoid and hence should be taken to include a zero. Are we simply counting objects or treating the naturals as an ordered set? Then there is no need for the additive identity, so the first element should probably be \( 1\).
</p>

<p>
So is zero a natural number? In my opinion, that depends on the problem you are working on. I think the reason that most people say that zero is not part of the naturals, is due to them thinking of the naturals as being an ordered set. This concept is taught much earlier in people's lives than the idea of a monoid, or just the notion of an identity. This debate won't be over any time soon, but hopefully people can start understanding the other side of the debate and see that both notions of the natural numbers make sense in their given context.
</p>
<div class="taglist"></div>]]></description>
  <link>https://jeslie0.github.io/2019-04-15-is-zero-a-natural-number.html</link>
  <guid>https://jeslie0.github.io/2019-04-15-is-zero-a-natural-number.html</guid>
  <pubDate>Mon, 15 Apr 2019 00:00:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[A group object in the category of groups]]></title>
  <description><![CDATA[
<p>
I think most people are surprised when they first discover what a group object in the category of groups is; I know I certainly was! I won't spoil what it is for you just now, but we will discuss it and why it is what it is later on in this post, so if you want to figure it out for yourself - read no further!
</p>

<p>
First, I should talk about what a "- object" actually is. One of the themes of category theory is to take set based structures (monoids, rings, vector spaces, topological spaces etc) and lift them to arbitrary categories. This is done more or less by the word 'set' with the word 'object' and the word 'function' with the word 'morphism'. Lets look at a relevant example.
</p>

<p>
A group object in a category \(\mathcal{C}\) with finite products, is an object G with morphisms \(\mu :G \times G \rightarrow G\), \(e: 1 \rightarrow G\) and \(\text{inv}:G \rightarrow G\), such that 
</p>

<ol class="org-ol">
<li>\(\mu(\mu \times 1_G) = \mu(1_G \times \mu)\),</li>
<li>\(\mu(e \times 1_G) = \pi_{G,1}^1\) and \(\mu(1_G \times e) = \pi_{1,G}^2\)</li>
<li>\(\mu(\text{inv} \times 1_G) \Delta = \mu(1_G \times \text{inv}) \Delta =e_G\), where \(e_G\) is the unique map \(G \rightarrow 1\) composed with \(e\), and \(\Delta\) is the diagonal map.</li>
</ol>

<p>
Here, 1 is the terminal object (the 0-product) in \(\mathcal{C}\). 
</p>

<p>
This definition is set up so that an ordinary group is simply just a group object in the category of sets. This allows us to easily define group objects in other categories, for example, a topological group is just a group object in the category of topological spaces. One key part of the definition is that the morphims of a group object must be in the category we are working over. 
</p>

<p>
Now before we figure out what a group object the category of groups is, it will be helpful to go off on a slight tangent and answer a different question: when is a group's operation a group homomorphism? It is the case that the metric on a metric space is always continuous, but does it generalise? Let's take a look.
</p>

<p>
Considering a group \(G\), we shall write it's operation simply as concatenation (or \(\times_G\)) and when regarding it as a function, we shall call it \(f:G \times G \rightarrow G\). The following then holds for all \(a,b,c \in G\):
</p>

\begin{align*}
f : G \times G \to G \text{ is a group hom} &\LongLeftRightarrow f((a,b) \times_{G\timesG} (c,d))= f(a,b) \times_G f(c,d)\\
&\LongLeftRightarrow f(ac, bd) = ab \times_G cd\\
&\LongLeftRightarrow acbd=abcd\\
&\LongLeftRightarrow cb=bc
\end{align*}

<p>
Therefore the group operation is a homomorphim if and only if the group is abelian! A surprise to be sure, but a welcome one. Now, how does this help us with our question? If there is a group homormorphism from \(G \times G \rightarrow G\) that satisfies the above properties, it must be the group operation on \(G\), by the following quick calculation:
</p>

\begin{align*}
f(g,h) &= f((g,e) \times_{G \times G} (e,h)) &&\\
&= f(g,e)f(e,h) && f \text{ is homomorphism,}\\
&=g \times_G h && f \text{ satisfies 2.}\\
&gh&&
\end{align*}

<p>
However, we know that the group operation is a group homomorphim if and only the group is abelian! This then means that a group object in the category of groups is precisely an abelian group! This certainly seemed strange to me when I first saw the result. It does have uses though, for an example, if you want to show that some group is abelian, all you need to do is show it is a group object. This method can be implemented to show that the second fundamental group is abelian, which is done on page xix of Leinster's <a href="https://arxiv.org/abs/math/0305049">Higher Operads, Higher Categories</a>.
</p>

<p>
This does raise other questions of a similar nature - what is a ring object in the category of rings for example? It is quick to see that such a ring \(R\) needs to be the trivial ring. We observe that the additive and multiplicative identities come from maps \(0_R, 1_R : 1 \rightarrow R\), that is they are encoded as maps from the terminal object to \(R\). In the category of rings, however, the terminal object is also the initial object. This forces \(1_R = 0_R\), hence \(R\) must be trivial.
</p>
<div class="taglist"></div>]]></description>
  <link>https://jeslie0.github.io/2019-1-12-A-group-object-in-the-category-of-groups.html</link>
  <guid>https://jeslie0.github.io/2019-1-12-A-group-object-in-the-category-of-groups.html</guid>
  <pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate>
</item>
<item>
  <title><![CDATA[Why isn't every category isomorphic to its opposite?]]></title>
  <description><![CDATA[
<p>
Whenever one comes across a mathematical object, such as a group, topological space etc, it is important to look at how it interacts with other similar objects. The same goes for categories with functors being how they interact.
</p>

<div class="definition" id="org0be3ab7">
<p>
Given two categories \( \mathscr{A}, \mathscr{B}\), a (covariant) functor \( F\) from \( \mathscr{A}\) to \( \mathscr{B}\) assigns to each object \( A \in \mathscr{A}\) an object \( F(A) \in \mathscr{B}\) and to each \( \mathscr{A}\)-morphism \( f:A \rightarrow A'\), a \( \mathscr{B}\)-morphism \( F(f):F(A) \rightarrow F(A')\). The assignements must respect composition and identities, so
</p>

<ul class="org-ul">
<li>\( F(g \circ h) = F(g) \circ F(h)\), for \( \mathscr{A}\)-maps \( f,g\),</li>
<li>\( F(1_A) = 1_{F(A)}\), for all \( A \in \mathscr{A}\).</li>
</ul>

</div>

<p>
We write functors as \( F: \mathscr{A} \rightarrow \mathscr{B}\). This then leads to the category \( \mathbf{CAT}\) whose objects are categories and whose morphisms are functors. We say that two categories are isomorphic if they are isomorphic in \( \mathbf{CAT}\). Given a category \( \mathscr{A}\), we can form its opposite category \( \mathscr{A}^{op}\), whose objects are the same as those in \( \mathscr{A}\), with \( \mathscr{A}^{op}\)-morphisms \( f:A' \rightarrow A\) in one to one correspondence with \( \mathscr{A}\)-morphisms \( f:A \rightarrow A'\). This means we can think of \( \mathscr{A}^{op}\) as being \( \mathscr{A}\) with it's morphisms turned around. It is clear from the definition of a functor that the obvious correspondence between a category and its opposite is not a functor. However, we can define a new type of functor that makes this possible.
</p>

<div class="definition" id="org41dbd92">
<p>
A contravariant functor \( F\) from \( \mathscr{A}\) to \( \mathscr{B}\) is a (covariant) functor \( F:\mathscr{A}^{op} \rightarrow \mathscr{B}\).
</p>

</div>

<p>
The key property of a contravariant functor is that it reverses composition. If \( F\) from \( \mathscr{A}\) to \( \mathscr{B}\) is a contravariant functor, then for \( \mathscr{A}\)-morphisms \( f, g\), we have \( F(f \circ g) = F(g) \circ F(f)\).
</p>

<p>
A question one may ask is whether or not a category is isomorphic to its opposite. In general this is false; however, to newcomers this isn't always obvious why. A typical false proof goes along the following lines:
</p>

<ol class="org-ol">
<li>For any category \( \mathscr{A}\), there are canonical contravariant functors \( F:\mathscr{A}^{op} \rightarrow \mathscr{A}\) and \( G:\mathscr{A} \rightarrow \mathscr{A}^{op}\).</li>
<li>Clearly \( F\circ G= 1_{\mathscr{A}}\) and \( G\circ F= 1_{\mathscr{A}^{op}}\).</li>
<li>\( \mathscr{A} \cong \mathscr{A}^{op}\).</li>
</ol>

<p>
The reason this doesn't hold is because the functors defined are contravariant, not covariant. To show such an isomorphism exists, one would need to construct a covariant functor \( F:\mathscr{A}^{op} \rightarrow \mathscr{A}\), so in particular the composition rule in Definition 1 must hold. Clearly for an arbitrary category, the canonical (contravariant) functor breaks this rule. A counter-example is to have a category with a terminal object and but no initial object. Its opposite has an initial object but no terminal, hence the two aren't isomorphic.
</p>

<div class="ex" id="org2545677">
<p>
Take the following two categories \(\mathcal A\) and \(\mathcal B\), where \(\mathcal B = \mathcal A ^{\text{op}}\). 
</p>


<figure id="orgf3894df">
<img src="./Images/untitled.png" alt="untitled.png">

</figure>

<p>
Suppose we have a covariant functor from \(\mathcal A \rightarrow \mathcal B\) that fixes the objects. The issue is that there are no arrows in \(\mathcal B\) that we can map \(f\) or \(g\) to. Since such a functor doesn't exist, \(\mathcal A\) and \(\mathcal B\) cannot be isomorphic. For such a functor to exist, it must be contravariant.
</p>

</div>
<div class="taglist"></div>]]></description>
  <link>https://jeslie0.github.io/2018-7-7-Why-isn't-every-category-isomorphic-to-its-opposite.html</link>
  <guid>https://jeslie0.github.io/2018-7-7-Why-isn't-every-category-isomorphic-to-its-opposite.html</guid>
  <pubDate>Sat, 07 Jul 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Categories of elements]]></title>
  <description><![CDATA[
<p>
When learning about colimits and presheaf categories, one often meets a category of elements. The definition of the category isn't particularly hard to understand or remember; however, I didn't immediately have an intuition for why it is useful or where the definition came from. This has lead me to play with it and try to understand some properties of it.
</p>

<div class="definition" id="org829857b">
<p>
Given a locally small category \( \mathbb{A}\) and a functor \( X:\mathbb{A}^{op} \rightarrow \mathbf{Set}\), the category of elements of \( X\), denoted \( \mathbb{E}(X)\) or \( \int^\mathbb{A} X\), is defined as follows:
</p>

<ul class="org-ul">
<li>Objects are pairs \( (A \in \mathbb{A}, x \in X(A))\),</li>
<li>Morphisms \( f:(A, x) \rightarrow (A',x')\) are maps \( f:A \rightarrow A' \in \mathbb{A}\) such that \( (Xf)(x')=x\).</li>
</ul>

</div>

<p>
Every category of elements has a projection functor \( P:\mathbb{E}(x) \rightarrow \mathbb{A}\) associated with it that sends \( (A,x) \mapsto A\) and \( f \mapsto f\). There is a useful property tucked away in the definition: for any \( \mathbb{A}\)-arrow \( f:A' \rightarrow A\), there is a unique element \( x' \in X(A')\) such that there is an \( \mathbb{E}(X)\)-morphism \( f:(A',x') \rightarrow (A, x)\), namely \( x' = (Xf)(x)\). As a result of this, we will often write morphism as \( f:(A', (Xf)(x)) \rightarrow (A,x)\). Another observation is that we can write \( \mathbb{E}(X)\) as a comma category.
</p>

<div class="lemma" id="org5d698f3">
<p>
There is an isomorphism \( \mathbb{E}(X) \cong (1 \Rightarrow X)\).
</p>

</div>

<div class="proof" id="org5332040">
<p>
We look at the comma category for the following diagram:
</p>


<figure id="orga3aaf47">
<img src="./Images/2018/06/comma.png" alt="comma.png">

</figure>

<p>
The double stroke 1 is the terminal category and the functor  1 is the functor that selects the terminal set. This category has as objects, pairs \( (A \in \mathbb{A}, x:1 \rightarrow X(A))\) and morphisms \( f:(A,x) \rightarrow (A',x')\) are commuting triangles:
</p>


<figure id="org9ba726f">
<img src="./Images/2018/06/comma11.png" alt="comma11.png">

</figure>

<p>
That this triangle commutes is the same as stating \( x = (Xf)(x')\), which is the condition above.
</p>

</div>

<p>
We can use the category of elements to relate representablity to the existence of a terminal object.
</p>

<div class="proposition" id="org2773898">
<p>
[1, Exercise 6.2.23] Let \( X\) be a presheaf on a locally small category. \( X\) is representable if and only if \( \mathbb{E}(X)\) has a terminal object.
</p>

</div>

<div class="proof" id="org662e749">
<p>
The category \( \mathbb{E}(X)\) has a terminal object if and only if there is an object \( (A, x)\) such that for any \( (A',x')\), there is exactly one morphism \( f:(A',x') \rightarrow (A,x)\). This is equivalent to there being an \( A \in \mathbb{A}\) and \( x \in X(A)\) such that for all \( A' \in \mathbb{A}\), \( x \in X(A')\), there is a unique morphism \( f:A' \rightarrow A\) such that \( (Xf)(x) = x'\). This condition is equivalent to \( X\) being representable, by [Corollary 4.3.2, 1].
</p>

</div>

<p>
One of the most important uses of the category of elements is to show that any presheaf is a colimit of a certain diagram, in a canonical way. This is the main purpose of the category of elements in [1, Definition 6.2.16].
</p>

<div class="proposition" id="org419e9a1">
<p>
[1, Theorem 6.2.17] *Let \( \mathbb{A}\) be small and \( X:\mathbb{A}^{op} \rightarrow \mathbf{Set}\) a presheaf. Then \( X\) is the colimit of the following diagram:
</p>


<figure id="org6881c43">
<img src="./Images/2018/06/diagram.png" alt="diagram.png">

</figure>

<p>
That is, \( X \cong \lim{\rightarrow \mathbb{E}(X)}(H\bullet \circ P)\).
</p>

</div>

<div class="proof" id="org8c3d18b">
<p>
We should first note that this does make sense; as \( \mathbb{A}\) is small, so is \( \mathbb{E}(X)\), hence a colimit does indeed exist.
</p>

<p>
We know that presheaf categories have all (small) limits and colimits, so a colimit of \( H_\bullet \circ P\) exists. Let \( Y \in [\mathbb{A}^{op}, \mathbf{Set}]\) be a presheaf and let \( (\alpha_{(A,x)}:(H_\bullet \circ P)(A,x) \rightarrow Y)_{(A,x)\in \mathbb{E}(X)}\) be a cocone on \( H_\bullet \circ P\) with vertex \( Y\). We can simply this to have \( (\alpha_{(A,x)}:(H_A \rightarrow Y)_{(A,x)\in \mathbb{E}(X)}\). This is a family of natural transformations, so for all \( f:(A',x') \rightarrow (A, x)\) in \( \mathbb{E}(X)\), the folowing diagram commutes
</p>


<figure id="orgf427b42">
<img src="./Images/2018/06/img1.png" alt="img1.png">

</figure>

<p>
By the Yoneda lemma, every natural transformation \( \alpha_{(A,x)}:H_A \rightarrow Y\) corresponds to a unique element \( (\alpha_{(A,x)})_A(1_A) \in Y(A)\), which we shall denote \( y_{(A,x)}\). As the diagram above commutes, it commutes for all \( A \in \mathbb{A}\), so in particular it commutes for \( A'\). This gives us the following:
</p>


<figure id="org2d2b2bc">
<img src="./Images/2018/06/img2.png" alt="img2.png">

</figure>

<p>
This gives us \( y_{(A',(Xf)(x))} = (\alpha_{(A,x)})_{A'}(f)\). As \( \alpha_{(A,x)}\) is a natural transformation, the following square commutes:
</p>


<figure id="org92af76e">
<img src="./Images/2018/06/img3.png" alt="img3.png">

</figure>

<p>
This gives us \( (Yf)(y_{(A,x)}) = (\alpha_{(A,x)})_{A'}(f)\). Combining this with the above we see that a cocone on \( Y\) is a collection of elements \( (y_{(A,x)})_{(A,x)\in \mathbb{E}(X)}\) such that for any \( f:(A',(Xf)(x)) \rightarrow (A,x)\) in \( \mathbb{E}(X)\), \( (Yf)(y_{(A,x)}) = y_{(A', (Xf)(x))}\).
</p>

<p>
An equivalent way to write \( y_{(A,x)}\) is \( \overline{\alpha}_A(x):X(A) \rightarrow Y(A)\) and treat it as a function.The properties above then say for any \( f:(A', (Xf)(x)) \rightarrow (A,x)\) in \( \mathbb{E}(X)\), \( (Yf)(\overline{\alpha}_A(x)) = \overline{\alpha}_{A'}((Xf)(x))\), that is to say the following diagram commutes for all \( f:A' \rightarrow A\) in \( \mathbb{A}\):
</p>


<figure id="orgb6beaf9">
<img src="./Images/2018/06/img4.png" alt="img4.png">

</figure>

<p>
This shows that \( \overline{\alpha}:X \rightarrow Y\) is a natural transformation. As all of the above is equivalent, we see that a cocone on \( Y\) is the same as a map from \( X\) into \( Y\), hence \( X\) is the colimit of \( H_\bullet \circ P\). We can write this as equivalence formally as
</p>

<p>
\( [\mathbb{E}(X), [\mathbb{A}^{op}, \mathbf{Set}]](H_\bullet \circ P, \Delta Y) \cong [\mathbb{A}^{op}, \mathbf{Set}](X,Y)\).
</p>

<p>
This is an application of the dual of [Equation 6.2, 1].
</p>

</div>

<p>
The property that morphisms in \( \mathbb{E}(X)\) have is vital to this proof and, to myself atleast, shows why we need to use this particular small category.
</p>

<p>
Given a set \( S\), there is an equivalence of categories \( \mathbf{Set}/S \simeq \mathbf{Set}^S\), where the latter has as objects \( S\) indexed tuples of sets. Given \( (A, f:A \rightarrow S) \in \mathbf{Set}/S\), we form the tuple \( (f^{-1}(s))_{s \in S}\) and given a tuple \( (A_s)_{s \in S}\), we form the disjoint union \( \coprod_{s \in S}A_s\) along with the function \( g:\coprod_{s \in S}A_s \rightarrow S\) that sends every element in each \( A_s\) to \( s\). This equivalence can be abstracted to categories by the following theorem.
</p>

<div class="theorem" id="org457976a">
<p>
[2, Proposition 1.1.7] Let \( \mathbb{A}\) be a small category and \( X: \mathbb{A}^{op} \rightarrow \mathbf{Set}\) a presheaf on \( \mathbb{A}\). Then there is an equivalence of categories:
</p>

<p>
\( [\mathbb{A}^{op}, \mathbf{Set}]/X \simeq [\mathbb{E}(X)^{op}, \mathbf{Set}]\).
</p>

</div>



<div class="proof" id="org0fdbe54">
<p>
I will give the functors required and leave the checking of the equivalence out, as it is pretty involved. The definitions of the functors require a proof to show that they are well defined (it needs to be shown that the natural transformations are indeed natural), however as this isn't too hard, we omit it. First, we define the following functor:
</p>


<figure id="org9b9fb26">
<img src="./Images/2018/06/functor.png" alt="functor.png">

</figure>

<p>
The functor \( \widehat{(F,\alpha)}\) is defined as follows:
</p>


<figure id="orga87b803">
<img src="./Images/2018/06/functor2.png" alt="functor2.png">

</figure>

<p>
Where \( \widehat{(F,\alpha)}(f)(y) = (Ff)(y)\). The natural transformation \( \hat{\lambda}\) has components \( \hat{\lambda}_{(A,x)}:\alpha_A^{-1} \rightarrow \beta_A^{-1}(x)\) with \( \hat{\lambda}_{(A,x)}(y) = \lambda_A(y)\). We now define a map in the other direction:
</p>


<figure id="org7342512">
<img src="./Images/2018/06/functor3.png" alt="functor3.png">

</figure>

<p>
The functor \( P_x: \mathbb{A}^{op} \rightarrow \mathbf{Set}\) is defined as \( P_x(A) = P(A,x)\). This can then be made into a functor \( \coprod_{x \in X(-)}P_x:\mathbb{A}^{op} \rightarrow \mathbf{Set}\). The natural transformation \( \tilde{P}\) has components defined by the universal property of the coproduct. If \( y \in P_x(A)\) then \( \tilde{P}_A(y) = x\). The natural transformation \( \tilde{\lambda}\) has components with the following action on \( y \in P(A,x)\) - \( \tilde{\lambda}_A(y) = \lambda_{(A,x)}(y)\).
</p>

<p>
It is shown in the attached pdf that these functors give rise to an equivalence, hence proving the claim.
</p>

</div>

<p>
In conclusion, the category of elements is vital to proving that any presheaf is actually a colimit of a certain diagram. It also shows that slice categories of presheaf categories can be seen as a presheaf category themselves.
</p>

<p>
<b>*</b>
</p>

<p>
(1) T. Leinster, Basic category theory, 2014, 2016.
</p>

<p>
(2) T. Leinster, Higher operads, higher categories, 2013.
</p>

<p>
(3) J. Leslie, [Category of elements](/files/category-elemets.pdf)
</p>
<div class="taglist"></div>]]></description>
  <link>https://jeslie0.github.io/2018-6-30-Categories-of-elements.html</link>
  <guid>https://jeslie0.github.io/2018-6-30-Categories-of-elements.html</guid>
  <pubDate>Sat, 30 Jun 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Yoneda, Yoneda, Yoneda]]></title>
  <description><![CDATA[
<p>
The Yoneda Lemma is one of the few 'theorems' one learns in a first course on category theory and it is an invaluable tool.
</p>

<p>
Suppose we have a locally small category \( \mathcal{A}\), then for any two objects \( A, B\) there is a set of maps from \( A\) to \( B\), denoted \( \mathcal{A}(A,B)\). We can make this into a functor by forgetting about the domain. We define the following functor:
</p>

<p>
\( H_B:\mathcal{A}^{op} \rightarrow \mathbf{Set}\),
</p>

<p>
such that \( A \mapsto H_B(A) = \mathcal{A}(A, B)\) and \((f:A \rightarrow C) \mapsto (H_A(f):H_A(C) \rightarrow H_A(A))\). Given any map \( g:C \rightarrow A\), \( (H_A(f))(g) = g \circ f:A \rightarrow A\). We can go further however, by removing our choice of \(A\). We define a functor
</p>

<p>
\(H_\cdot:\mathcal{A} \rightarrow [\mathcal{A}^\text{op}, \mathbf{Set}]\),
</p>

<p>
where \( A \mapsto H_A\) and \( (f:A \rightarrow B) \mapsto (H_f:H_A \rightarrow H_B)\), where \( H_f\) is a natural transformation. For any \( C \in \mathcal{A}\), the \( C\) component of \( H_f\) is a function \( (H_f)_C:H_A(C) \rightarrow H_B(C)\) such that for any map \( g:C \rightarrow A\), \( ((H_f)_C)(g) = f \circ g:C \rightarrow B\).
</p>

<p>
The functor \( H_\cdot\) is known as the Yoneda embedding. It comes hand in hand with the Yoneda Lemma.
</p>

<div id="outline-container-orge864572" class="outline-2">
<h2 id="orge864572">Yoneda lemma</h2>
<div class="outline-text-2" id="text-orge864572">
<div class="theorem" id="org6e86caf">
<p>
Let \(\mathcal{A}\) be a locally small category. Then 
</p>

<p>
\([\mathcal{A}^\text{op}, \mathbf{Set}](H_A, X) \cong X(A)\),
</p>

<p>
naturally in \(A \in \mathcal{A}\) and \( X \in  [\mathcal{A}^\text{op}, \mathbf{Set}]\).
</p>

</div>

<p>
There are many discussions on the importance of Yoneda, however we shall skip over them and instead look at the Yoneda embedding. This functor can only really be called an embedding if it is both full and faithful. This is a trivial result of the Yoneda lemma, however it is not necessary to invoke the lemma and it can be proven without it.
</p>
</div>
</div>

<div id="outline-container-org27d92e8" class="outline-2">
<h2 id="org27d92e8">Yoneda embedding is full and faithful</h2>
<div class="outline-text-2" id="text-org27d92e8">
<p>
Let \( A, A' \in \mathcal{A}\), and let \( \alpha:H_A \rightarrow H_{A'}\) be a natural transformation. We need to find a map \( f:A \rightarrow A'\) such that \( \alpha = H_f\). Looking at the \( A\) component of \( \alpha\) gives us a function
</p>

<p>
\(\alpha_A:H_A(A) \rightarrow H_{A'}(A)\).
</p>

<p>
We apply this to the identity map on \( A\) to get a map \( \alpha_A(1_A):A \rightarrow A'\). I claim that this is the required map. For notation, we shall call it \( f\). It is the case that \( H_f = \alpha\) if and only if each component is equal, that is \( (H_f)_B = \alpha_B\) for all objects \( B \in \mathcal{A}\). Choosing an arbitrary \( B \in \mathcal{A}\), as both  \( (H_f)_B\) and \( \alpha_B\) are functions, they are equal if and only if they take the same values on the same inputs. Recall the domains and codomains of the functions:
</p>

<p>
\((H_f)_B, \alpha_B: H_A(B) \rightarrow H_{A'}(B)\).
</p>

<p>
Take an arbitrary map \( g:B \rightarrow A\). Then \( ((H_f)_B)(g) = f \circ g = \alpha_A(1_A) \circ g\). We need to show that this is \( \alpha_B(g)\). This follows from the naturality of \( \alpha\). Indeed, for naturality gives us the following commutative square:
</p>

<p>
\[\begin{tikzcd}
H_A(A) \arrow[r, "- \circ g"] \arrow[d, "\alpha_A"'] & H_A(B) \arrow[d, "\alpha_B"] \\
H_{A'}(A) \arrow[r, "-\circ g"']                     & H_A'(B)                     
\end{tikzcd}\]
</p>

<p>
These functions take the following on \( 1_A\):
</p>

<p>
\[\begin{tikzcd}
1_A \arrow[dd, maps to] \arrow[r, maps to] & g \arrow[d, maps to]  \\
                                           & \alpha_B(g)           \\
\alpha_A(1_A) \arrow[r, maps to]           & \alpha_A(1_A) \circ g
\end{tikzcd}\]
</p>

<p>
This says that \( \alpha_B(g) = \alpha_A(1_A) \circ g\). This means \( \alpha_B\) and \( (H_f)_B\) are equal as functions, which means that \( H_f = \alpha\). which by our reasoning above shows that \( \alpha = H_f\), hence \( H_\cdot\) is full.
</p>

<p>
For faithfulness, again fix \( A, A' \in \mathcal{A}\) and consider two natural transformations \( H_f, H_g: H_A \rightarrow H_A'\). Supposing \( H_f = H_g\), we need to show that \( f=g\). As \( H_f = H_g\), \( (H_f)_A = (H_g)_A)\). These are both functions, so we apply them to \( 1_A\) giving us \( f \circ 1_A = g \circ 1_A\), therefore \( f = g\), proving faithfulness.
</p>

<p>
Despite not explicitly using the Yoneda lemma, everything we have done is used in the proof of it. There is one more result that helps capture the idea behind the proof for Yoneda.
</p>
</div>
</div>

<div id="outline-container-org9c7ff2a" class="outline-2">
<h2 id="org9c7ff2a">Yoneda embedding is injective on isomorphism classes</h2>
<div class="outline-text-2" id="text-org9c7ff2a">
<p>
Suppose for two objects \( A, B \in \mathcal{A}\) that \( H_A \cong H_{B}\). This means that we have two natural isomorphisms:
</p>

<p>
\(\alpha:H_A \rightarrow H_B, \qquad \beta:H_B \rightarrow H_A\)
</p>

<p>
which are inverses to each other. By reasoning from above, we a map \( \alpha_A(1_A):A \rightarrow B\) and \( \beta_B(1_B):B \rightarrow A\). For notation, we shall call \( \alpha_A(1_A) = f\) and \( \beta_B(1_B) = g\). Again from above, we see that \( \alpha_B(g) = \alpha_A(1_A) \circ g\). Substituting for \( g\) gives that \( \alpha_B(\beta_B(1_B)) = \alpha_A(1_A) \circ \beta_B(1_B)\). As \( \alpha\) and \( \beta\) are inverses, their components are mutual inverses. This means \( \alpha_B(\beta_B(1_B)) = 1_B\), so \( \alpha_A(1_A) \circ \beta_B(1_B) = 1_B\). A similar argument shows that \( \beta_B(1_B) \circ \alpha_A(1_A) = 1_A\), hence \( \alpha_A(1_A)\) and \( \beta_B(1_B)\) are isomorphisms. Therefore, \( A \cong B\).
</p>

<p>
The results from this post are from Chapter 4 of Tom Leinster's Basic Category Theory textbook, which can be found <a href="https://arxiv.org/abs/1612.09375">here</a>.
</p>
</div>
</div>
<div class="taglist"></div>]]></description>
  <link>https://jeslie0.github.io/2018-4-23-Yoneda-Yoneda-Yoneda.html</link>
  <guid>https://jeslie0.github.io/2018-4-23-Yoneda-Yoneda-Yoneda.html</guid>
  <pubDate>Mon, 23 Apr 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Monoidal Categories]]></title>
  <description><![CDATA[
<p>
In mathematics, we are familiar with putting structure on sets, for example a group is a set with a binary operation satisfying certain properties. We can extend this notion to categories. The first examples I came across in my studies were monoidal categories, which are used to abstract the notion of a tensor product, and have deep ties to quantum mechanics and physics.
</p>
<div class="definition" id="orgd343065">
<p>
A <i>monoidal category</i> is a category \(\mathcal{C}\) with a functor \( \otimes: \mathcal{C} \times \mathcal{C} \rightarrow \mathcal{C}\), an object \( I \in \mathcal{C}\) called the unit and the following natural isomorphisms, written in terms of their components:
</p>

<ol class="org-ol">
<li>An associator \(\alpha_{A,B,C}: (A \otimes B) \otimes C \rightarrow A \otimes (B \otimes C)\),</li>
<li>A left unitor \(\lambda_A: I \otimes A \rightarrow A\),</li>
<li>A right unitor \(\rho_A: A \otimes I \rightarrow A\).</li>
</ol>


<p>
These maps all have to satisfy the following diagrams, aptly named the triangle and pentagon identities.
</p>


<p>
\[\begin{tikzcd}
                                                                                                                                    & (A \otimes I) \otimes B \arrow[rr, "{\alpha_{A, I , B}}"] \arrow[rd, "\rho_A \otimes \text{id}_B"'] &                                                                                & A \otimes (I \otimes B) \arrow[ld, "\text{id}_A \otimes \lambda_B"]                    &                                     \\
                                                                                                                                    &                                                                                                     & A \otimes B                                                                    &                                                                                        &                                     \\
                                                                                                                                    & (A \otimes (B \otimes C)) \otimes D \arrow[rr, "{\alpha_{A, B \otimes C,D}}"]                       &                                                                                & A \otimes ((B \otimes C) \otimes D) \arrow[rd, "{\text{id}_A \otimes \alpha_{B,C,d}}"] &                                     \\
((A \otimes B)\otimes C) \otimes D \arrow[ru, "{\alpha_{A,B,C} \otimes \text{id}_D}"] \arrow[rrd, "{\alpha_{A \otimes B, C , D}}"'] &                                                                                                     &                                                                                &                                                                                        & A \otimes (B \otimes (C \otimes D)) \\
                                                                                                                                    &                                                                                                     & (A \otimes B) \otimes (C \otimes D) \arrow[rru, "{\alpha_{A,B,C \otimes D}}"'] &                                                                                        &                                    
                                                                                                                                    \end{tikzcd}\]
</p>

</div>

<p>
These two diagrams remarkably lead to a coherence theorem which states that every well formed formula built from \(\alpha, \lambda, \rho\) and their inverses holds. This gives us for free that \( \rho_I = \lambda_I\), which would otherwise be very painful to prove.
</p>

<p>
The classic example of a monoidal category is \( \mathbf{Hilb}\), the category of Hilbert spaces with morphisms as bounded linear maps. The tensor functor simply gives the tensor product of two Hilbert spaces and the unit object is \( \mathbb{C}\), the complex numbers. The natural transformations are given in the obvious way. We can turn \( \mathbf{Set}\) into a monoidal category by having the \( \otimes\) functor give the Cartesian product of two sets and having the terminal object 1 as the unit.
</p>

<p>
The study of both \( \mathbf{Hilb}\) and \( \mathbf{Set}\) are useful for physics. The former is used to formalize quantum mechanics and the latter classical physics. One property that \(\mathbf{Hilb}\) has that \(\mathbf{Set}\) doesn't is the existence of a zero object. This is an object, denoted \(0\), which is both initial and terminal, that is, given any other object \( A\), there is exactly one morphism \( 0 \rightarrow A\) and exactly one morphism \( A \rightarrow 0\). It isn't hard to see that \( \mathbf{Hilb}\), the zero object is simply the Hilbert space consisting of just a zero vector. It is also not difficult to show that \( \mathbf{Set}\) doesn't have a zero object, since if it did it would need to be isomorphic to both the one element set and the empty set, which is impossible.
</p>

<p>
It is easy to see that in \( \mathbf{Hilb}\), we have \( 0 \otimes 0 \cong 0\). This is true for all monoidal categories with a zero object, as we shall now prove. I highly recommend trying this exercise for yourself first!
</p>

<p>
We have the following unique arrows: \( f: I \rightarrow 0\) and \( g:0 \rightarrow I\). These give rise to maps \( f \otimes 1_0:I \otimes 0 \rightarrow 0 \otimes 0\) and \( g \otimes 1_0: 0 \otimes 0 \rightarrow I \otimes0\). We then get the following composites:
</p>

<p>
&lt;a class="btn btn-rss" href="/feed.xml" target="<sub>blank</sub>"&gt;RSS&lt;/a&gt;
</p>
<ol class="org-ol">
<li>\( 0 \xrightarrow{\lambda_0^{-1}} I \otimes 0 \xrightarrow{f \otimes 1_0} 0 \otimes 0\),</li>
<li>\(0 \otimes 0 \xrightarrow{g \otimes 1_0} I \otimes 0 \xrightarrow{\lambda_0} 0\).</li>
</ol>


<p>
As \( 0\) is a zero-object, there is only one map \( 0 \rightarrow 0\), namely the identity map \( 1_0\). This means
</p>

<p>
\(\left(\lambda_0 \circ (g \otimes 1_0)\right) \circ \left((f \otimes 1_0) \circ \lambda_0^{-1} \right)= 1_0\).
</p>

<p>
We also see that \( f \circ g:0 \rightarrow 0\), so \( f \circ g = 1_0\). We can then build the following commuting square:
</p>

<p>
\[ \begin{tikzcd}
0 \arrow[r, "g"] \arrow[d, "1_0"'] & I \arrow[d, "1_I"] \\
0                                  & I \arrow[l, "f"]  
\end{tikzcd} \]
</p>

<p>
We can apply the functor \( - \otimes 0\) to this square to get the following square:
\[\begin{tikzcd}
0 \otimes 0 \arrow[r, "g \otimes 1_0"] \arrow[d, "1_0 \otimes 1_0"'] & I \otimes 0 \arrow[d, "1_I"]           \\
0 \otimes 0                                                          & I \otimes 0 \arrow[l, "f \otimes 1_0"]
\end{tikzcd}\]
</p>

<p>
Factoring \( 1_{I \otimes 0} = \lambda_0^{-1} \circ \lambda_0\) gives the following diagram:
</p>

<p>
\[\begin{tikzcd}
0 \otimes 0 \arrow[r, "g \otimes 1_0"] \arrow[d, "1_0 \otimes 1_0"'] & I \otimes 0 \arrow[d, "1_I"] \arrow[r, "\lambda_0"] & 0 \arrow[ld, "\lambda_0^{-1}"] \\
0 \otimes 0                                                          & I \otimes 0 \arrow[l, "f \otimes 1_0"]              &                               
\end{tikzcd}\]
</p>

<p>
We also know that \( 1_0 \otimes 1_0 = 1_{0 \otimes0}\), from the tensor product functor. As this commutes, we have \( \left((f \otimes 1_0) \circ \lambda_0^{-1} \right) \circ  \left(\lambda_0 \circ (g \otimes 1_0)\right) = 1_{0\otimes0}\). This results in the maps (1) and (2) being mutual inverses, hence \( 0 \cong 0 \otimes 0\), as required.
</p>

<p>
This is only the tip of the iceberg when it comes to monoidal categories, for example, we might want \( A \otimes B \cong B \otimes A\), in which case we need to look at braided monoidal categories. This post has been inspired by revision for one of my exams. The content is from lecture notes by my lecturer Chris Heunen which can (currently) be found <a href="http://www.inf.ed.ac.uk/teaching/courses/cqi/">here</a>.
</p>
<div class="taglist"></div>]]></description>
  <link>https://jeslie0.github.io/2018-04-15-Monoidal-Categories.html</link>
  <guid>https://jeslie0.github.io/2018-04-15-Monoidal-Categories.html</guid>
  <pubDate>Sun, 15 Apr 2018 00:00:00 +0100</pubDate>
</item>
</channel>
</rss>
